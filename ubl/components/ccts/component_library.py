from ubl.components.ccts import CodeType, AmountType, BinaryObjectType, \
    AssociatedBusinessEntity, DateTimeType, NumericType, TextType, \
    MeasureType, QuantityType, IdentifierType, IndicatorType, NameType
import itertools


class ComponentMap:
    # list the entire components for the UBL documents system
    __slots__ = (
        'ActivityDataLine',
        'ActivityProperty',
        'Address',
        'AddressLine',
        'AirTransport',
        'AllowanceCharge',
        'AppealTerms',
        'Attachment',
        'AuctionTerms',
        'AwardingCriterion',
        'AwardingCriterionResponse',
        'AwardingTerms',
        'BillingReference',
        'BillingReferenceLine',
        'Branch',
        'BudgetAccount',
        'BudgetAccountLine',
        'Capability',
        'CardAccount',
        'CatalogueItemSpecificationUpdateLine',
        'CatalogueLine',
        'CataloguePricingUpdateLine',
        'CatalogueReference',
        'CatalogueRequestLine',
        'Certificate',
        'CertificateOfOriginApplication',
        'ClassificationCategory',
        'ClassificationScheme',
        'Clause',
        'CommodityClassification',
        'Communication',
        'CompletedTask',
        'Condition',
        'Consignment',
        'Consumption',
        'ConsumptionAverage',
        'ConsumptionCorrection',
        'ConsumptionHistory',
        'ConsumptionLine',
        'ConsumptionPoint',
        'ConsumptionReport',
        'ConsumptionReportReference',
        'Contact',
        'Contract',
        'ContractExecutionRequirement',
        'ContractExtension',
        'ContractingActivity',
        'ContractingParty',
        'ContractingPartyType',
        'CorporateRegistrationScheme',
        'Country',
        'CreditAccount',
        'CreditNoteLine',
        'CustomerParty',
        'CustomsDeclaration',
        'DebitNoteLine',
        'Declaration',
        'Delivery',
        'DeliveryTerms',
        'DeliveryUnit',
        'DependentPriceReference',
        'Despatch',
        'DespatchLine',
        'Dimension',
        'DocumentDistribution',
        'DocumentReference',
        'DocumentResponse',
        'Duty',
        'EconomicOperatorRole',
        'EconomicOperatorShortList',
        'EmissionCalculationMethod',
        'Endorsement',
        'EndorserParty',
        'EnergyTaxReport',
        'EnergyWaterSupply',
        'EnvironmentalEmission',
        'EvaluationCriterion',
        'Event',
        'EventComment',
        'EventLineItem',
        'EventTactic',
        'EventTacticEnumeration',
        'Evidence',
        'EvidenceSupplied',
        'ExceptionCriteriaLine',
        'ExceptionNotificationLine',
        'ExchangeRate',
        'ExternalReference',
        'FinancialAccount',
        'FinancialGuarantee',
        'FinancialInstitution',
        'ForecastException',
        'ForecastExceptionCriterionLine',
        'ForecastLine',
        'ForecastRevisionLine',
        'FrameworkAgreement',
        'GoodsItem',
        'GoodsItemContainer',
        'HazardousGoodsTransit',
        'HazardousItem',
        'ImmobilizedSecurity',
        'InstructionForReturnsLine',
        'InventoryReportLine',
        'InvoiceLine',
        'Item',
        'ItemComparison',
        'ItemIdentification',
        'ItemInformationRequestLine',
        'ItemInstance',
        'ItemLocationQuantity',
        'ItemManagementProfile',
        'ItemProperty',
        'ItemPropertyGroup',
        'ItemPropertyRange',
        'Language',
        'LineItem',
        'LineReference',
        'LineResponse',
        'Location',
        'LocationCoordinate',
        'LotIdentification',
        'MaritimeTransport',
        'Meter',
        'MeterProperty',
        'MeterReading',
        'MiscellaneousEvent',
        'MonetaryTotal',
        'NotificationRequirement',
        'OnAccountPayment',
        'OrderLine',
        'OrderLineReference',
        'OrderReference',
        'OrderedShipment',
        'Package',
        'Party',
        'PartyIdentification',
        'PartyLegalEntity',
        'PartyName',
        'PartyTaxScheme',
        'Payment',
        'PaymentMandate',
        'PaymentMeans',
        'PaymentTerms',
        'PerformanceDataLine',
        'Period',
        'Person',
        'PhysicalAttribute',
        'Pickup',
        'PowerOfAttorney',
        'Price',
        'PriceExtension',
        'PriceList',
        'PricingReference',
        'ProcessJustification',
        'ProcurementProject',
        'ProcurementProjectLot',
        'ProjectReference',
        'PromotionalEvent',
        'PromotionalEventLineItem',
        'PromotionalSpecification',
        'QualificationResolution',
        'QualifyingParty',
        'QuotationLine',
        'RailTransport',
        'ReceiptLine',
        'Regulation',
        'RelatedItem',
        'ReminderLine',
        'RemittanceAdviceLine',
        'Renewal',
        'RequestForQuotationLine',
        'RequestForTenderLine',
        'RequestedTenderTotal',
        'Response',
        'ResultOfVerification',
        'RetailPlannedImpact',
        'RoadTransport',
        'SalesItem',
        'SecondaryHazard',
        'ServiceFrequency',
        'ServiceProviderParty',
        'ShareholderParty',
        'Shipment',
        'ShipmentStage',
        'Signature',
        'StatementLine',
        'Status',
        'StockAvailabilityReportLine',
        'Stowage',
        'SubcontractTerms',
        'SubscriberConsumption',
        'SupplierConsumption',
        'SupplierParty',
        'TaxCategory',
        'TaxScheme',
        'TaxSubtotal',
        'TaxTotal',
        'TelecommunicationsService',
        'TelecommunicationsSupply',
        'TelecommunicationsSupplyLine',
        'Temperature',
        'TenderLine',
        'TenderPreparation',
        'TenderRequirement',
        'TenderResult',
        'TenderedProject',
        'TendererPartyQualification',
        'TendererQualificationRequest',
        'TendererRequirement',
        'TenderingProcess',
        'TenderingTerms',
        'TradeFinancing',
        'TradingTerms',
        'TransactionConditions',
        'TransportEquipment',
        'TransportEquipmentSeal',
        'TransportEvent',
        'TransportExecutionTerms',
        'TransportHandlingUnit',
        'TransportMeans',
        'TransportSchedule',
        'TransportationSegment',
        'TransportationService',
        'UnstructuredPrice',
        'UtilityItem',
        'WebSiteAccess',
        'WinningParty',
        'WorkPhaseReference',
    )

    def __init__(self):
        code = CodeType.mock()
        asbie = AssociatedBusinessEntity.mock()
        measure = MeasureType.mock()
        quantity = QuantityType.mock()
        datetime = DateTimeType.mock()
        numeric = NumericType.mock()
        text = TextType.mock()
        identifier = IdentifierType.mock()
        indicator = IndicatorType.mock()
        amount = AmountType.mock()
        binary = BinaryObjectType.mock()
        name = NameType.mock()

        self.ActivityDataLine = iter([
            ('id', identifier),
            ('supply_chain_activity_type_code', code),
            ('buyer_customer_party', asbie),
            ('seller_supplier_party', asbie),
            ('activity_period', asbie),
            ('activity_origin_location', asbie),
            ('activity_final_location', asbie),
            ('sales_item', asbie),
        ])
        self.ActivityProperty = iter([
            ('name', name),
            ('value', text),
        ])
        self.Address = iter([
            ('id', identifier),
            ('address_type_code', code),
            ('address_format_code', code),
            ('postbox', text),
            ('floor', text),
            ('room', text),
            ('street_name', name),
            ('additional_street_name', name),
            ('block_name', name),
            ('building_name', name),
            ('building_number', text),
            ('inhouse_mail', text),
            ('department', text),
            ('mark_attention', text),
            ('mark_care', text),
            ('plot_identification', text),
            ('city_subdivision_name', name),
            ('city_name', name),
            ('postal_zone', text),
            ('country_sub_entity', text),
            ('country_sub_entity_code', code),
            ('region', text),
            ('district', text),
            ('timezone_offset', text),
            ('address_line', asbie),
            ('country', asbie),
            ('location_coordinate', asbie),
        ])
        self.AddressLine = iter([('line', text)])
        self.AirTransport = iter([('aircraft_identifier', identifier)])
        self.AllowanceCharge = iter([
            ('id', identifier),
            ('charge_indicator', indicator),
            ('allowance_charge_reason_code', code),
            ('allowance_charge_reason', text),
            ('multiplier_factor', numeric),
            ('prepaid_indicator', indicator),
            ('sequence', numeric),
            ('amount', amount),
            ('base_amount', amount),
            ('accounting_cost_code', code),
            ('accounting_cost', text),
            ('per_unit_amount', amount),
            ('tax_category', asbie),
            ('tax_total', asbie),
            ('payment_means', asbie),
        ])
        self.AppealTerms = iter([
            ('description', text),
            ('presentation_period', asbie),
            ('appeal_information_party', asbie),
            ('appeal_receiver_party', asbie),
            ('mediation_party', asbie),
        ])
        self.Attachment = iter([
            ('embedded_document', binary),
            ('external_reference', asbie),
        ])
        self.AuctionTerms = iter([
            ('auction_constraint', indicator),
            ('justification_description', text),
            ('description', text),
            ('process_description', text),
            ('conditions_description', text),
            ('electronic_device_description', text),
            ('auction_uri', identifier),
        ])
        self.AwardingCriterion = iter([
            ('id', identifier),
            ('awarding_criterion_type_code', code),
            ('description', text),
            ('weight_numeric', numeric),
            ('weight', text),
            ('calculation_expression', text),
            ('calculation_expression_code', code),
            ('minimum_quantity', quantity),
            ('maximum_quantity', quantity),
            ('minimum_amount', amount),
            ('maximum_amount', amount),
            ('minimum_improvement_bid', text),
            ('subordinate_awarding_criterion', asbie),
        ])
        self.AwardingCriterionResponse = iter([
            ('id', identifier),
            ('awarding_criterion_identifier', identifier),
            ('awarding_criterion_description', text),
            ('description', text),
            ('quantity', quantity),
            ('amount', amount),
            ('subordinate_awarding_criterion_response', asbie),
        ])
        self.AwardingTerms = iter([
            ('weighting_algorithm_code', code),
            ('description', text),
            ('technical_committee_description', text),
            ('low_tenders_description', text),
            ('prize_indicator', indicator),
            ('prize_description', text),
            ('payment_description', text),
            ('followup_contract_indicator', indicator),
            ('binding_on_buyer_indicator', indicator),
            ('awarding_criterion', asbie),
            ('technical_committee_person', asbie),
        ])
        self.BillingReference = iter([
            ('invoice_document_reference', asbie),
            ('self_billed_invoice_document_reference', asbie),
            ('credit_note_document_reference', asbie),
            ('self_billed_credit_note_document_reference', asbie),
            ('debit_note_document_reference', asbie),
            ('reminder_document_reference', asbie),
            ('additional_document_reference', asbie),
            ('billing_reference_line', asbie),
        ])
        self.BillingReferenceLine = iter([
            ('id', identifier),
            ('amount', amount),
            ('allowance_charge', asbie),
        ])
        self.Branch = iter([
            ('id', identifier),
            ('name', name),
            ('financial_institution', asbie),
            ('address', asbie),
        ])
        self.BudgetAccount = iter([
            ('id', identifier),
            ('budget_year', numeric),
            ('required_classification_scheme', asbie),
        ])
        self.BudgetAccountLine = iter([
            ('id', identifier),
            ('total_amount', amount),
            ('budget_account', asbie),
        ])
        self.Capability = iter([
            ('capability_type_code', code),
            ('description', text),
            ('value', amount),
            ('value_quantity', quantity),
            ('evidence_supplied', asbie),
            ('validity_period', asbie),
        ])
        self.CardAccount = iter([
            ('primary_account_number', identifier),
            ('network', identifier),
            ('card_type_code', code),
            ('validity_start_date', datetime),
            ('expiry_date', datetime),
            ('issuer', identifier),
            ('issue_number', identifier),
            ('cv2', identifier),
            ('card_chip_code', code),
            ('chip_application', identifier),
            ('holder', name),
        ])
        self.CatalogueItemSpecificationUpdateLine = iter([
            ('id', identifier),
            ('contractor_customer_party', asbie),
            ('seller_supplier_party', asbie),
            ('item', asbie),
        ])
        self.CatalogueLine = iter([
            ('id', identifier),
            ('action_code', code),
            ('life_cycle_status_code', code),
            ('contract_subdivision', text),
            ('note', text),
            ('orderable_indicator', indicator),
            ('orderable_unit', text),
            ('content_unit', quantity),
            ('order_quantity_increment', numeric),
            ('minimum_order_quantity', quantity),
            ('maximum_order_quantity', quantity),
            ('warranty_information', text),
            ('pack_level_code', code),
            ('contractor_customer_party', asbie),
            ('seller_supplier_party', asbie),
            ('warranty_party', asbie),
            ('warranty_validity_period', asbie),
            ('line_validity_period', asbie),
            ('item_comparison', asbie),
            ('component_related_item', asbie),
            ('accessory_related_item', asbie),
            ('required_related_item', asbie),
            ('replacement_related_item', asbie),
            ('complementary_related_item', asbie),
            ('replaced_related_item', asbie),
            ('required_item_location_quantity', asbie),
            ('document_reference', asbie),
            ('item', asbie),
            ('keyword_item_property', asbie),
            ('call_for_tenders_line_reference', asbie),
            ('call_for_tenders_document_reference', asbie),
        ])
        self.CataloguePricingUpdateLine = iter([
            ('id', identifier),
            ('contractor_customer_party', asbie),
            ('seller_supplier_party', asbie),
            ('required_item_location_quantity', asbie),
        ])
        self.CatalogueReference = iter([
            ('id', identifier),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('revision_date', datetime),
            ('revision_time', datetime),
            ('note', text),
            ('description', text),
            ('version', identifier),
            ('previous_version', identifier),
        ])
        self.CatalogueRequestLine = iter([
            ('id', identifier),
            ('contract_subdivision', text),
            ('note', text),
            ('line_validity_period', asbie),
            ('required_item_location_quantity', asbie),
            ('item', asbie),
        ])
        self.Certificate = iter([
            ('id', identifier),
            ('certificate_type_code', code),
            ('certificate_type', text),
            ('remarks', text),
            ('issuer_party', asbie),
            ('document_reference', asbie),
            ('signature', asbie),
        ])
        self.CertificateOfOriginApplication = iter([
            ('reference', identifier),
            ('certificate_type', text),
            ('application_status_code', code),
            ('original_job_identifier', identifier),
            ('previous_job_identifier', identifier),
            ('remarks', text),
            ('shipment', asbie),
            ('endorser_party', asbie),
            ('preparation_party', asbie),
            ('issuer_party', asbie),
            ('exporter_party', asbie),
            ('importer_party', asbie),
            ('issuing_country', asbie),
            ('document_distribution', asbie),
            ('supporting_document_reference', asbie),
            ('signature', asbie),
        ])
        self.ClassificationCategory = iter([
            ('name', name),
            ('code_value', text),
            ('description', text),
            ('categorizes_classification_category', asbie),
        ])
        self.ClassificationScheme = iter([
            ('id', identifier),
            ('uuid', identifier),
            ('last_revision_date', datetime),
            ('last_revision_time', datetime),
            ('note', text),
            ('name', name),
            ('description', text),
            ('agency_identifier', identifier),
            ('agency_name', text),
            ('version', identifier),
            ('uri', identifier),
            ('scheme_uri', identifier),
            ('language', identifier),
            ('classification_category', asbie),
        ])
        self.Clause = iter([
            ('id', identifier),
            ('content', text),
        ])
        self.CommodityClassification = iter([
            ('nature_code', code),
            ('cargo_type_code', code),
            ('commodity_code', code),
            ('item_classification_code', code),
        ])
        self.Communication = iter([
            ('channel_code', code),
            ('channel', text),
            ('value', text),
        ])
        self.CompletedTask = iter([
            ('annual_average', amount),
            ('total_task', amount),
            ('party_capacity', amount),
            ('description', text),
            ('evidence_supplied', asbie),
            ('period', asbie),
            ('recipient_customer_party', asbie),
        ])
        self.Condition = iter([
            ('attribute_identifier', identifier),
            ('measure', measure),
            ('description', text),
            ('minimum_measure', measure),
            ('maximum_measure', measure),
        ])
        self.Consignment = iter([
            ('id', identifier),
            ('carrier_assigned_id', identifier),
            ('consignee_assigned_id', identifier),
            ('consignor_assigned_id', identifier),
            ('freight_forwarder_assigned_id', identifier),
            ('broker_assigned_id', identifier),
            ('contracted_carrier_assigned_id', identifier),
            ('performing_carrier_assigned_id', identifier),
            ('summary_description', text),
            ('total_invoice_amount', amount),
            ('declared_customs_value', amount),
            ('tariff_description', text),
            ('tariff_code', code),
            ('insurance_premium_amount', amount),
            ('gross_weight', measure),
            ('net_weight', measure),
            ('net_net_weight', measure),
            ('chargeable_weight', measure),
            ('gross_volume', measure),
            ('net_volume', measure),
            ('loading_length', measure),
            ('remarks', text),
            ('hazardous_risk_indicator', indicator),
            ('animal_food_indicator', indicator),
            ('human_food_indicator', indicator),
            ('livestock_indicator', indicator),
            ('bulk_cargo_indicator', indicator),
            ('containerized_indicator', indicator),
            ('general_cargo_indicator', indicator),
            ('special_security_indicator', indicator),
            ('third_party_payer_indicator', indicator),
            ('carrier_service_instructions', text),
            ('customs_clearance_service_instructions', text),
            ('forwarder_service_instructions', text),
            ('special_service_instructions', text),
            ('sequence_identifier', identifier),
            ('shipping_priority_level_code', code),
            ('handling_code', code),
            ('handling_instructions', text),
            ('information', text),
            ('total_goods_item_quantity', quantity),
            ('total_transport_handling_unit_quantity', quantity),
            ('insurance_value', amount),
            ('declared_for_carriage_value', amount),
            ('declared_statistics_value', amount),
            ('free_on_board_value', amount),
            ('special_instructions', text),
            ('split_consignment_indicator', indicator),
            ('delivery_instructions', text),
            ('consignment_quantity', quantity),
            ('consolidatable_indicator', indicator),
            ('haulage_instructions', text),
            ('loading_sequence_identifier', identifier),
            ('child_consignment_quantity', quantity),
            ('total_packages_quantity', quantity),
            ('consolidated_shipment', asbie),
            ('customs_declaration', asbie),
            ('requested_pickup_transport_event', asbie),
            ('requested_delivery_transport_event', asbie),
            ('planned_pickup_transport_event', asbie),
            ('planned_delivery_transport_event', asbie),
            ('status', asbie),
            ('child_consignment', asbie),
            ('consignee_party', asbie),
            ('exporter_party', asbie),
            ('consignor_party', asbie),
            ('importer_party', asbie),
            ('carrier_party', asbie),
            ('freight_forwarder_party', asbie),
            ('notify_party', asbie),
            ('original_despatch_party', asbie),
            ('final_delivery_party', asbie),
            ('performing_carrier_party', asbie),
            ('substitute_carrier_party', asbie),
            ('logistics_operator_party', asbie),
            ('transport_advisor_party', asbie),
            ('hazardous_item_notification_party', asbie),
            ('insurance_party', asbie),
            ('mortgage_holder_party', asbie),
            ('bill_of_lading_holder_party', asbie),
            ('original_departure_country', asbie),
            ('final_destination_country', asbie),
            ('transit_country', asbie),
            ('transport_contract', asbie),
            ('transport_event', asbie),
            ('original_despatch_transportation_service', asbie),
            ('final_delivery_transportation_service', asbie),
            ('delivery_terms', asbie),
            ('payment_terms', asbie),
            ('collect_payment_terms', asbie),
            ('disbursement_payment_terms', asbie),
            ('prepaid_payment_terms', asbie),
            ('freight_allowance_charge', asbie),
            ('extra_allowance_charge', asbie),
            ('main_carriage_shipment_stage', asbie),
            ('pre_carriage_shipment_stage', asbie),
            ('on_carriage_shipment_stage', asbie),
            ('transport_handling_unit', asbie),
            ('first_arrival_port_location', asbie),
            ('last_exit_port_location', asbie),
        ])
        self.Consumption = iter([
            ('utility_statement_type_code', code),
            ('main_period', asbie),
            ('allowance_charge', asbie),
            ('tax_total', asbie),
            ('energy_water_supply', asbie),
            ('telecommunications_supply', asbie),
            ('legal_monetary_total', asbie),
        ])
        self.ConsumptionAverage = iter([
            ('average_amount', amount),
            ('description', text),
        ])
        self.ConsumptionCorrection = iter([
            ('correction_type', text),
            ('correction_type_code', code),
            ('meter_number', text),
            ('gas_pressure', quantity),
            ('actual_temperature_reduction', quantity),
            ('normal_temperature_reduction', quantity),
            ('difference_temperature_reduction', quantity),
            ('description', text),
            ('correction_unit_amount', amount),
            ('consumption_energy', quantity),
            ('consumption_water', quantity),
            ('correction_amount', amount),
        ])
        self.ConsumptionHistory = iter([
            ('meter_number', text),
            ('quantity', quantity),
            ('amount', amount),
            ('consumption_level_code', code),
            ('consumption_level_text', text),
            ('description', text),
            ('period', asbie),
        ])
        self.ConsumptionLine = iter([
            ('id', identifier),
            ('parent_document_line_reference_identifier', identifier),
            ('invoiced_quantity', quantity),
            ('line_extension_amount', amount),
            ('period', asbie),
            ('delivery', asbie),
            ('allowance_charge', asbie),
            ('tax_total', asbie),
            ('utility_item', asbie),
            ('price', asbie),
            ('unstructured_price', asbie),
        ])
        self.ConsumptionPoint = iter([
            ('id', identifier),
            ('description', text),
            ('subscriber_identifier', identifier),
            ('subscriber_type', text),
            ('subscriber_type_code', code),
            ('total_delivered_quantity', quantity),
            ('address', asbie),
            ('web_site_access', asbie),
            ('utility_meter', asbie),
        ])
        self.ConsumptionReport = iter([
            ('id', identifier),
            ('consumption_type', text),
            ('consumption_type_code', code),
            ('description', text),
            ('total_consumed_quantity', quantity),
            ('basic_consumed_quantity', quantity),
            ('resident_occupants_numeric', numeric),
            ('consumers_energy_level_code', code),
            ('consumers_energy_level', text),
            ('residence_type', text),
            ('residence_type_code', code),
            ('heating_type', text),
            ('heating_type_code', code),
            ('period', asbie),
            ('guidance_document_reference', asbie),
            ('document_reference', asbie),
            ('consumption_report_reference', asbie),
            ('consumption_history', asbie),
        ])
        self.ConsumptionReportReference = iter([
            ('consumption_report_identifier', identifier),
            ('consumption_type', text),
            ('consumption_type_code', code),
            ('total_consumed_quantity', quantity),
            ('period', asbie),
        ])
        self.Contact = iter([
            ('id', identifier),
            ('name', name),
            ('telephone', text),
            ('telefax', text),
            ('electronic_mail', text),
            ('note', text),
            ('other_communication', asbie),
        ])
        self.Contract = iter([
            ('id', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('nomination_date', datetime),
            ('nomination_time', datetime),
            ('contract_type_code', code),
            ('contract_type', text),
            ('note', text),
            ('version', identifier),
            ('description', text),
            ('validity_period', asbie),
            ('contract_document_reference', asbie),
            ('nomination_period', asbie),
            ('contractual_delivery', asbie),
        ])
        self.ContractExecutionRequirement = iter([
            ('name', name),
            ('execution_requirement_code', code),
            ('description', text),
        ])
        self.ContractExtension = iter([
            ('options_description', text),
            ('minimum_number', numeric),
            ('maximum_number', numeric),
            ('option_validity_period', asbie),
            ('renewal', asbie),
        ])
        self.ContractingActivity = iter([
            ('activity_type_code', code),
            ('activity_type', text),
        ])
        self.ContractingParty = iter([
            ('buyer_profile_uri', identifier),
            ('contracting_party_type', asbie),
            ('contracting_activity', asbie),
            ('party', asbie),
        ])
        self.ContractingPartyType = iter([
            ('party_type_code', code),
            ('party_type', text),
        ])
        self.CorporateRegistrationScheme = iter([
            ('id', identifier),
            ('name', name),
            ('corporate_registration_type_code', code),
            ('jurisdiction_region_address', asbie),
        ])
        self.Country = iter([
            ('identification_code', code),
            ('name', name),
        ])
        self.CreditAccount = iter([('account_identifier', identifier)])
        self.CreditNoteLine = iter([
            ('id', identifier),
            ('uuid', identifier),
            ('note', text),
            ('credited_quantity', quantity),
            ('line_extension_amount', amount),
            ('tax_point_date', datetime),
            ('accounting_cost_code', code),
            ('accounting_cost', text),
            ('payment_purpose_code', code),
            ('free_of_charge_indicator', indicator),
            ('invoice_period', asbie),
            ('order_line_reference', asbie),
            ('discrepancy_response', asbie),
            ('despatch_line_reference', asbie),
            ('receipt_line_reference', asbie),
            ('billing_reference', asbie),
            ('document_reference', asbie),
            ('pricing_reference', asbie),
            ('originator_party', asbie),
            ('delivery', asbie),
            ('payment_terms', asbie),
            ('tax_total', asbie),
            ('allowance_charge', asbie),
            ('item', asbie),
            ('price', asbie),
            ('delivery_terms', asbie),
            ('sub_credit_note_line', asbie),
            ('item_price_extension', asbie),
        ])
        self.CustomerParty = iter([
            ('customer_assigned_account_identifier', identifier),
            ('supplier_assigned_account_identifier', identifier),
            ('additional_account_identifier', identifier),
            ('party', asbie),
            ('delivery_contact', asbie),
            ('accounting_contact', asbie),
            ('buyer_contact', asbie),
        ])
        self.CustomsDeclaration = iter([
            ('id', identifier),
            ('issuer_party', asbie),
        ])
        self.DebitNoteLine = iter([
            ('id', identifier),
            ('uuid', identifier),
            ('note', text),
            ('debited_quantity', quantity),
            ('line_extension_amount', amount),
            ('tax_point_date', datetime),
            ('accounting_cost_code', code),
            ('accounting_cost', text),
            ('payment_purpose_code', code),
            ('discrepancy_response', asbie),
            ('despatch_line_reference', asbie),
            ('receipt_line_reference', asbie),
            ('billing_reference', asbie),
            ('document_reference', asbie),
            ('pricing_reference', asbie),
            ('delivery', asbie),
            ('tax_total', asbie),
            ('allowance_charge', asbie),
            ('item', asbie),
            ('price', asbie),
            ('sub_debit_note_line', asbie),
        ])
        self.Declaration = iter([
            ('name', name),
            ('declaration_type_code', code),
            ('description', text),
            ('evidence_supplied', asbie),
        ])
        self.Delivery = iter([
            ('id', identifier),
            ('quantity', quantity),
            ('minimum_quantity', quantity),
            ('maximum_quantity', quantity),
            ('actual_delivery_date', datetime),
            ('actual_delivery_time', datetime),
            ('latest_delivery_date', datetime),
            ('latest_delivery_time', datetime),
            ('release', identifier),
            ('tracking_identifier', identifier),
            ('delivery_address', asbie),
            ('delivery_location', asbie),
            ('alternative_delivery_location', asbie),
            ('requested_delivery_period', asbie),
            ('promised_delivery_period', asbie),
            ('estimated_delivery_period', asbie),
            ('carrier_party', asbie),
            ('delivery_party', asbie),
            ('notify_party', asbie),
            ('despatch', asbie),
            ('delivery_terms', asbie),
            ('minimum_delivery_unit', asbie),
            ('maximum_delivery_unit', asbie),
            ('shipment', asbie),
        ])
        self.DeliveryTerms = iter([
            ('id', identifier),
            ('special_terms', text),
            ('loss_risk_responsibility_code', code),
            ('loss_risk', text),
            ('amount', amount),
            ('delivery_location', asbie),
            ('allowance_charge', asbie),
        ])
        self.DeliveryUnit = iter([
            ('batch_quantity', quantity),
            ('consumer_unit', quantity),
            ('hazardous_risk_indicator', indicator),
        ])
        self.DependentPriceReference = iter([
            ('percent', numeric),
            ('location_address', asbie),
            ('dependent_line_reference', asbie),
        ])
        self.Despatch = iter([
            ('id', identifier),
            ('requested_despatch_date', datetime),
            ('requested_despatch_time', datetime),
            ('estimated_despatch_date', datetime),
            ('estimated_despatch_time', datetime),
            ('actual_despatch_date', datetime),
            ('actual_despatch_time', datetime),
            ('guaranteed_despatch_date', datetime),
            ('guaranteed_despatch_time', datetime),
            ('release', identifier),
            ('instructions', text),
            ('despatch_address', asbie),
            ('despatch_location', asbie),
            ('despatch_party', asbie),
            ('carrier_party', asbie),
            ('notify_party', asbie),
            ('contact', asbie),
            ('estimated_despatch_period', asbie),
            ('requested_despatch_period', asbie),
        ])
        self.DespatchLine = iter([
            ('id', identifier),
            ('uuid', identifier),
            ('note', text),
            ('line_status_code', code),
            ('delivered_quantity', quantity),
            ('backorder_quantity', quantity),
            ('backorder_reason', text),
            ('outstanding_quantity', quantity),
            ('outstanding_reason', text),
            ('oversupply_quantity', quantity),
            ('order_line_reference', asbie),
            ('document_reference', asbie),
            ('item', asbie),
            ('shipment', asbie),
        ])
        self.Dimension = iter([
            ('attribute_identifier', identifier),
            ('measure', measure),
            ('description', text),
            ('minimum_measure', measure),
            ('maximum_measure', measure),
        ])
        self.DocumentDistribution = iter([
            ('print_qualifier', text),
            ('maximum_copies', numeric),
            ('party', asbie),
        ])
        self.DocumentReference = iter([
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('document_type_code', code),
            ('document_type', text),
            ('xpath', text),
            ('language', identifier),
            ('locale_code', code),
            ('version', identifier),
            ('document_status_code', code),
            ('document_description', text),
            ('attachment', asbie),
            ('validity_period', asbie),
            ('issuer_party', asbie),
            ('result_of_verification', asbie),
        ])
        self.DocumentResponse = iter([
            ('response', asbie),
            ('document_reference', asbie),
            ('issuer_party', asbie),
            ('recipient_party', asbie),
            ('line_response', asbie),
        ])
        self.Duty = iter([
            ('amount', amount),
            ('duty', text),
            ('duty_code', code),
            ('tax_category', asbie),
        ])
        self.EconomicOperatorRole = iter([
            ('role_code', code),
            ('role_description', text),
        ])
        self.EconomicOperatorShortList = iter([
            ('limitation_description', text),
            ('expected_quantity', quantity),
            ('maximum_quantity', quantity),
            ('minimum_quantity', quantity),
            ('pre_selected_party', asbie),
        ])
        self.EmissionCalculationMethod = iter([
            ('calculation_method_code', code),
            ('fullness_indication_code', code),
            ('measurement_from_location', asbie),
            ('measurement_to_location', asbie),
        ])
        self.Endorsement = iter([
            ('document', identifier),
            ('approval_status', text),
            ('remarks', text),
            ('endorser_party', asbie),
            ('signature', asbie),
        ])
        self.EndorserParty = iter([
            ('role_code', code),
            ('sequence', numeric),
            ('party', asbie),
            ('signatory_contact', asbie),
        ])
        self.EnergyTaxReport = iter([
            ('tax_energy_amount', amount),
            ('tax_energy_on_account_amount', amount),
            ('tax_energy_balance', amount),
            ('tax_scheme', asbie),
        ])
        self.EnergyWaterSupply = iter([
            ('consumption_report', asbie),
            ('energy_tax_report', asbie),
            ('consumption_average', asbie),
            ('energy_water_consumption_correction', asbie),
        ])
        self.EnvironmentalEmission = iter([
            ('environmental_emission_type_code', code),
            ('value', measure),
            ('description', text),
            ('emission_calculation_method', asbie),
        ])
        self.EvaluationCriterion = iter([
            ('evaluation_criterion_type_code', code),
            ('description', text),
            ('threshold_amount', amount),
            ('threshold_quantity', quantity),
            ('expression_code', code),
            ('expression', text),
            ('duration_period', asbie),
            ('suggested_evidence', asbie),
        ])
        self.Event = iter([
            ('identification', identifier),
            ('occurrence_date', datetime),
            ('occurrence_time', datetime),
            ('type_code', code),
            ('description', text),
            ('completion_indicator', indicator),
            ('current_status', asbie),
            ('contact', asbie),
            ('occurence_location', asbie),
        ])
        self.EventComment = iter([
            ('comment', text),
            ('issue_date', datetime),
            ('issue_time', datetime),
        ])
        self.EventLineItem = iter([
            ('line_number', numeric),
            ('participating_locations_location', asbie),
            ('retail_planned_impact', asbie),
            ('supply_item', asbie),
        ])
        self.EventTactic = iter([
            ('comment', text),
            ('quantity', quantity),
            ('event_tactic_enumeration', asbie),
            ('period', asbie),
        ])
        self.EventTacticEnumeration = iter([
            ('consumer_incentive_tactic_type_code', code),
            ('display_tactic_type_code', code),
            ('feature_tactic_type_code', code),
            ('trade_item_packing_labeling_type_code', code),
        ])
        self.Evidence = iter([
            ('id', identifier),
            ('evidence_type_code', code),
            ('description', text),
            ('candidate_statement', text),
            ('evidence_issuing_party', asbie),
            ('document_reference', asbie),
            ('language', asbie),
        ])
        self.EvidenceSupplied = iter([('id', identifier)])
        self.ExceptionCriteriaLine = iter([
            ('id', identifier),
            ('note', text),
            ('threshold_value_comparison_code', code),
            ('threshold_quantity', quantity),
            ('exception_status_code', code),
            ('collaboration_priority_code', code),
            ('exception_resolution_code', code),
            ('supply_chain_activity_type_code', code),
            ('performance_metric_type_code', code),
            ('effective_period', asbie),
            ('supply_item', asbie),
            ('forecast_exception_criterion_line', asbie),
        ])
        self.ExceptionNotificationLine = iter([
            ('id', identifier),
            ('note', text),
            ('description', text),
            ('exception_status_code', code),
            ('collaboration_priority_code', code),
            ('resolution_code', code),
            ('compared_value', measure),
            ('source_value', measure),
            ('variance', quantity),
            ('supply_chain_activity_type_code', code),
            ('performance_metric_type_code', code),
            ('exception_observation_period', asbie),
            ('document_reference', asbie),
            ('forecast_exception', asbie),
            ('supply_item', asbie),
        ])
        self.ExchangeRate = iter([
            ('source_currency_code', code),
            ('source_currency_base_rate', numeric),
            ('target_currency_code', code),
            ('target_currency_base_rate', numeric),
            ('exchange_market_identifier', identifier),
            ('calculation_rate', numeric),
            ('mathematic_operator_code', code),
            ('date', datetime),
            ('foreign_exchange_contract', asbie),
        ])
        self.ExternalReference = iter([
            ('uri', identifier),
            ('document_hash', text),
            ('hash_algorithm_method', text),
            ('expiry_date', datetime),
            ('expiry_time', datetime),
            ('mime_code', code),
            ('format_code', code),
            ('encoding_code', code),
            ('character_set_code', code),
            ('file_name', name),
            ('description', text),
        ])
        self.FinancialAccount = iter([
            ('id', identifier),
            ('name', name),
            ('alias_name', name),
            ('account_type_code', code),
            ('account_format_code', code),
            ('currency_code', code),
            ('payment_note', text),
            ('financial_institution_branch', asbie),
            ('country', asbie),
        ])
        self.FinancialGuarantee = iter([
            ('guarantee_type_code', code),
            ('description', text),
            ('liability', amount),
            ('amount', numeric),
            ('constitution_period', asbie),
        ])
        self.FinancialInstitution = iter([
            ('id', identifier),
            ('name', name),
            ('address', asbie),
        ])
        self.ForecastException = iter([
            ('forecast_purpose_code', code),
            ('forecast_type_code', code),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('data_source_code', code),
            ('comparison_data_code', code),
            ('comparison_forecast_issue_time', datetime),
            ('comparison_forecast_issue_date', datetime),
        ])
        self.ForecastExceptionCriterionLine = iter([
            ('forecast_purpose_code', code),
            ('forecast_type_code', code),
            ('comparison_data_source_code', code),
            ('data_source_code', code),
            ('time_delta_days_quantity', quantity),
        ])
        self.ForecastLine = iter([
            ('id', identifier),
            ('note', text),
            ('frozen_document_indicator', indicator),
            ('forecast_type_code', code),
            ('forecast_period', asbie),
            ('sales_item', asbie),
        ])
        self.ForecastRevisionLine = iter([
            ('id', identifier),
            ('note', text),
            ('description', text),
            ('revised_forecast_line_identifier', identifier),
            ('source_forecast_issue_date', datetime),
            ('source_forecast_issue_time', datetime),
            ('adjustment_reason_code', code),
            ('forecast_period', asbie),
            ('sales_item', asbie),
        ])
        self.FrameworkAgreement = iter([
            ('expected_operator', quantity),
            ('maximum_operator', quantity),
            ('justification', text),
            ('frequency', text),
            ('duration_period', asbie),
            ('subsequent_process_tender_requirement', asbie),
        ])
        self.GoodsItem = iter([
            ('id', identifier),
            ('sequence_number', identifier),
            ('description', text),
            ('hazardous_risk_indicator', indicator),
            ('declared_customs_value', amount),
            ('declared_for_carriage_value', amount),
            ('declared_statistics_value', amount),
            ('free_on_board_value', amount),
            ('insurance_value', amount),
            ('value', amount),
            ('gross_weight', measure),
            ('net_weight', measure),
            ('net_net_weight', measure),
            ('chargeable_weight', measure),
            ('gross_volume', measure),
            ('net_volume', measure),
            ('quantity', quantity),
            ('preference_criterion_code', code),
            ('required_customs_identifier', identifier),
            ('customs_status_code', code),
            ('customs_tariff_quantity', quantity),
            ('customs_import_classified_indicator', indicator),
            ('chargeable_quantity', quantity),
            ('returnable_quantity', quantity),
            ('trace_id', identifier),
            ('item', asbie),
            ('goods_item_container', asbie),
            ('freight_allowance_charge', asbie),
            ('invoice_line', asbie),
            ('temperature', asbie),
            ('contained_goods_item', asbie),
            ('origin_address', asbie),
            ('delivery', asbie),
            ('pickup', asbie),
            ('despatch', asbie),
            ('measurement_dimension', asbie),
            ('containing_package', asbie),
            ('shipment_document_reference', asbie),
            ('minimum_temperature', asbie),
            ('maximum_temperature', asbie),
        ])
        self.GoodsItemContainer = iter([
            ('id', identifier),
            ('quantity', quantity),
            ('transport_equipment', asbie),
        ])
        self.HazardousGoodsTransit = iter([
            ('transport_emergency_card_code', code),
            ('packing_criteria_code', code),
            ('hazardous_regulation_code', code),
            ('inhalation_toxicity_zone_code', code),
            ('transport_authorization_code', code),
            ('maximum_temperature', asbie),
            ('minimum_temperature', asbie),
        ])
        self.HazardousItem = iter([
            ('id', identifier),
            ('placard_notation', text),
            ('placard_endorsement', text),
            ('additional_information', text),
            ('undg_code', code),
            ('emergency_procedures_code', code),
            ('medical_first_aid_guide_code', code),
            ('technical_name', name),
            ('category', name),
            ('hazardous_category_code', code),
            ('upper_orange_hazard_placard_identifier', identifier),
            ('lower_orange_hazard_placard_identifier', identifier),
            ('marking_identifier', identifier),
            ('hazard_class_identifier', identifier),
            ('net_weight', measure),
            ('net_volume', measure),
            ('quantity', quantity),
            ('contact_party', asbie),
            ('secondary_hazard', asbie),
            ('hazardous_goods_transit', asbie),
            ('emergency_temperature', asbie),
            ('flashpoint_temperature', asbie),
            ('additional_temperature', asbie),
        ])
        self.ImmobilizedSecurity = iter([
            ('immobilization_certificate_identifier', identifier),
            ('security_identifier', identifier),
            ('issue_date', datetime),
            ('face_value', amount),
            ('market_value', amount),
            ('shares_number', quantity),
            ('issuer_party', asbie),
        ])
        self.InstructionForReturnsLine = iter([
            ('id', identifier),
            ('note', text),
            ('quantity', quantity),
            ('manufacturer_party', asbie),
            ('item', asbie),
        ])
        self.InventoryReportLine = iter([
            ('id', identifier),
            ('note', text),
            ('quantity', quantity),
            ('inventory_value', amount),
            ('availability_date', datetime),
            ('availability_status_code', code),
            ('item', asbie),
            ('inventory_location', asbie),
        ])
        self.InvoiceLine = iter([
            ('id', identifier),
            ('uuid', identifier),
            ('note', text),
            ('invoiced_quantity', quantity),
            ('line_extension_amount', amount),
            ('tax_point_date', datetime),
            ('accounting_cost_code', code),
            ('accounting_cost', text),
            ('payment_purpose_code', code),
            ('free_of_charge_indicator', indicator),
            ('invoice_period', asbie),
            ('order_line_reference', asbie),
            ('despatch_line_reference', asbie),
            ('receipt_line_reference', asbie),
            ('billing_reference', asbie),
            ('document_reference', asbie),
            ('pricing_reference', asbie),
            ('originator_party', asbie),
            ('delivery', asbie),
            ('payment_terms', asbie),
            ('allowance_charge', asbie),
            ('tax_total', asbie),
            ('withholding_tax_total', asbie),
            ('item', asbie),
            ('price', asbie),
            ('delivery_terms', asbie),
            ('sub_invoice_line', asbie),
            ('item_price_extension', asbie),
        ])
        self.Item = iter([
            ('description', text),
            ('pack_quantity', quantity),
            ('pack_size', numeric),
            ('catalogue_indicator', indicator),
            ('name', name),
            ('hazardous_risk_indicator', indicator),
            ('additional_information', text),
            ('keyword', text),
            ('brand_name', name),
            ('model_name', name),
            ('buyers_item_identification', asbie),
            ('sellers_item_identification', asbie),
            ('manufacturers_item_identification', asbie),
            ('standard_item_identification', asbie),
            ('catalogue_item_identification', asbie),
            ('additional_item_identification', asbie),
            ('catalogue_document_reference', asbie),
            ('item_specification_document_reference', asbie),
            ('origin_country', asbie),
            ('commodity_classification', asbie),
            ('transaction_conditions', asbie),
            ('hazardous_item', asbie),
            ('classified_tax_category', asbie),
            ('additional_item_property', asbie),
            ('manufacturer_party', asbie),
            ('information_content_provider_party', asbie),
            ('origin_address', asbie),
            ('item_instance', asbie),
            ('certificate', asbie),
            ('dimension', asbie),
        ])
        self.ItemComparison = iter([
            ('price_amount', amount),
            ('quantity', quantity),
        ])
        self.ItemIdentification = iter([
            ('id', identifier),
            ('extended_id', identifier),
            ('barcode_symbology_identifier', identifier),
            ('physical_attribute', asbie),
            ('measurement_dimension', asbie),
            ('issuer_party', asbie),
        ])
        self.ItemInformationRequestLine = iter([
            ('time_frequency_code', code),
            ('supply_chain_activity_type_code', code),
            ('forecast_type_code', code),
            ('performance_metric_type_code', code),
            ('period', asbie),
            ('sales_item', asbie),
        ])
        self.ItemInstance = iter([
            ('product_trace_id', identifier),
            ('manufacture_date', datetime),
            ('manufacture_time', datetime),
            ('best_before_date', datetime),
            ('registration_identifier', identifier),
            ('serial_identifier', identifier),
            ('additional_item_property', asbie),
            ('lot_identification', asbie),
        ])
        self.ItemLocationQuantity = iter([
            ('lead_time', measure),
            ('minimum_quantity', quantity),
            ('maximum_quantity', quantity),
            ('hazardous_risk_indicator', indicator),
            ('trading_restrictions', text),
            ('applicable_territory_address', asbie),
            ('price', asbie),
            ('delivery_unit', asbie),
            ('applicable_tax_category', asbie),
            ('package', asbie),
            ('allowance_charge', asbie),
            ('dependent_price_reference', asbie),
        ])
        self.ItemManagementProfile = iter([
            ('frozen_period_days', numeric),
            ('minimum_inventory_quantity', quantity),
            ('multiple_order_quantity', quantity),
            ('order_interval_days', numeric),
            ('replenishment_owner_description', text),
            ('target_service_percent', numeric),
            ('target_inventory_quantity', quantity),
            ('effective_period', asbie),
            ('item', asbie),
            ('item_location_quantity', asbie),
        ])
        self.ItemProperty = iter([
            ('id', identifier),
            ('name', name),
            ('name_code', code),
            ('test_method', text),
            ('value', text),
            ('value_quantity', quantity),
            ('value_qualifier', text),
            ('importance_code', code),
            ('list_value', text),
            ('usability_period', asbie),
            ('item_property_group', asbie),
            ('range_dimension', asbie),
            ('item_property_range', asbie),
        ])
        self.ItemPropertyGroup = iter([
            ('id', identifier),
            ('name', name),
            ('importance_code', code),
        ])
        self.ItemPropertyRange = iter([
            ('minimum_value', text),
            ('maximum_value', text),
        ])
        self.Language = iter([
            ('id', identifier),
            ('name', name),
            ('locale_code', code),
        ])
        self.LineItem = iter([
            ('id', identifier),
            ('sales_order_identifier', identifier),
            ('uuid', identifier),
            ('note', text),
            ('line_status_code', code),
            ('quantity', quantity),
            ('line_extension_amount', amount),
            ('total_tax_amount', amount),
            ('minimum_quantity', quantity),
            ('maximum_quantity', quantity),
            ('minimum_backorder', quantity),
            ('maximum_backorder', quantity),
            ('inspection_method_code', code),
            ('partial_delivery_indicator', indicator),
            ('back_order_allowed_indicator', indicator),
            ('accounting_cost_code', code),
            ('accounting_cost', text),
            ('warranty_information', text),
            ('delivery', asbie),
            ('delivery_terms', asbie),
            ('originator_party', asbie),
            ('ordered_shipment', asbie),
            ('pricing_reference', asbie),
            ('allowance_charge', asbie),
            ('price', asbie),
            ('item', asbie),
            ('sub_line_item', asbie),
            ('warranty_validity_period', asbie),
            ('warranty_party', asbie),
            ('tax_total', asbie),
            ('item_price_extension', asbie),
            ('line_reference', asbie),
        ])
        self.LineReference = iter([
            ('line_identifier', identifier),
            ('uuid', identifier),
            ('line_status_code', code),
            ('document_reference', asbie),
        ])
        self.LineResponse = iter([
            ('line_reference', asbie),
            ('response', asbie),
        ])
        self.Location = iter([
            ('id', identifier),
            ('description', text),
            ('conditions', text),
            ('country_subentity', text),
            ('country_subentity_code', code),
            ('location_type_code', code),
            ('information_uri', identifier),
            ('name', name),
            ('validity_period', asbie),
            ('address', asbie),
            ('subsidiary_location', asbie),
            ('location_coordinate', asbie),
        ])
        self.LocationCoordinate = iter([
            ('coordinate_system_code', code),
            ('latitude_degrees', measure),
            ('latitude_minutes', measure),
            ('latitude_direction_code', code),
            ('longitude_degrees', measure),
            ('longitude_minutes', measure),
            ('longitude_direction_code', code),
            ('altitude', measure),
        ])
        self.LotIdentification = iter([
            ('lot_number', identifier),
            ('expiry_date', datetime),
            ('additional_item_property', asbie),
        ])
        self.MaritimeTransport = iter([
            ('vessel_identifier', identifier),
            ('vessel_name', name),
            ('radio_call_sign_identifier', identifier),
            ('ships_requirements', text),
            ('gross_tonnage', measure),
            ('net_tonnage', measure),
            ('registry_certificate_document_reference', asbie),
            ('registry_port_location', asbie),
        ])
        self.Meter = iter([
            ('meter_number', text),
            ('meter_name', text),
            ('meter_constant', text),
            ('meter_constant_code', code),
            ('total_delivered_quantity', quantity),
            ('meter_reading', asbie),
            ('meter_property', asbie),
        ])
        self.MeterProperty = iter([
            ('name', name),
            ('name_code', code),
            ('value', text),
            ('value_quantity', quantity),
            ('value_qualifier', text),
        ])
        self.MeterReading = iter([
            ('id', identifier),
            ('meter_reading_type', text),
            ('meter_reading_type_code', code),
            ('previous_meter_reading_date', datetime),
            ('previous_meter_quantity', quantity),
            ('latest_meter_reading_date', datetime),
            ('latest_meter_quantity', quantity),
            ('previous_meter_reading_method', text),
            ('previous_meter_reading_method_code', code),
            ('latest_meter_reading_method', text),
            ('latest_meter_reading_method_code', code),
            ('meter_reading_comments', text),
            ('delivered_quantity', quantity),
        ])
        self.MiscellaneousEvent = iter([
            ('miscellaneous_event_type_code', code),
            ('event_line_item', asbie),
        ])
        self.MonetaryTotal = iter([
            ('line_extension_amount', amount),
            ('tax_exclusive_amount', amount),
            ('tax_inclusive_amount', amount),
            ('allowance_total_amount', amount),
            ('charge_total_amount', amount),
            ('prepaid_amount', amount),
            ('payable_rounding_amount', amount),
            ('payable_amount', amount),
            ('payable_alternative_amount', amount),
        ])
        self.NotificationRequirement = iter([
            ('notification_type_code', code),
            ('post_event_notification_duration', measure),
            ('pre_event_notification_duration', measure),
            ('notify_party', asbie),
            ('notification_period', asbie),
            ('notification_location', asbie),
        ])
        self.OnAccountPayment = iter([
            ('estimated_consumed_quantity', quantity),
            ('note', text),
            ('payment_terms', asbie),
        ])
        self.OrderLine = iter([
            ('substitution_status_code', code),
            ('note', text),
            ('line_item', asbie),
            ('seller_proposed_substitute_line_item', asbie),
            ('seller_substituted_line_item', asbie),
            ('buyer_proposed_substitute_line_item', asbie),
            ('catalogue_line_reference', asbie),
            ('quotation_line_reference', asbie),
            ('order_line_reference', asbie),
            ('document_reference', asbie),
        ])
        self.OrderLineReference = iter([
            ('line_identifier', identifier),
            ('sales_order_line_identifier', identifier),
            ('uuid', identifier),
            ('line_status_code', code),
            ('order_reference', asbie),
        ])
        self.OrderReference = iter([
            ('id', identifier),
            ('sales_order_identifier', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('customer_reference', text),
            ('order_type_code', code),
            ('document_reference', asbie),
        ])
        self.OrderedShipment = iter([
            ('shipment', asbie),
            ('package', asbie),
        ])
        self.Package = iter([
            ('id', identifier),
            ('quantity', quantity),
            ('returnable_material_indicator', indicator),
            ('package_level_code', code),
            ('packaging_type_code', code),
            ('packing_material', text),
            ('trace_id', identifier),
            ('contained_package', asbie),
            ('containing_transport_equipment', asbie),
            ('goods_item', asbie),
            ('measurement_dimension', asbie),
            ('delivery_unit', asbie),
            ('delivery', asbie),
            ('pickup', asbie),
            ('despatch', asbie),
        ])
        self.Party = iter([
            ('mark_care_indicator', indicator),
            ('mark_attention_indicator', indicator),
            ('website_uri', identifier),
            ('logo_reference', identifier),
            ('endpoint_identifier', identifier),
            ('industry_classification_code', code),
            ('party_identification', asbie),
            ('party_name', asbie),
            ('language', asbie),
            ('postal_address', asbie),
            ('physical_location', asbie),
            ('party_tax_scheme', asbie),
            ('party_legal_entity', asbie),
            ('contact', asbie),
            ('person', asbie),
            ('agent_party', asbie),
            ('service_provider_party', asbie),
            ('power_of_attorney', asbie),
            ('financial_account', asbie),
        ])
        self.PartyIdentification = iter([('id', identifier)])
        self.PartyLegalEntity = iter([
            ('registration_name', name),
            ('company_identifier', identifier),
            ('registration_date', datetime),
            ('registration_expiration_date', datetime),
            ('company_legal_form_code', code),
            ('company_legal_form', text),
            ('sole_proprietorship_indicator', indicator),
            ('company_liquidation_status_code', code),
            ('corporate_stock_amount', amount),
            ('fully_paid_shares_indicator', indicator),
            ('registration_address', asbie),
            ('corporate_registration_scheme', asbie),
            ('head_office_party', asbie),
            ('shareholder_party', asbie),
        ])
        self.PartyName = iter([('name', name)])
        self.PartyTaxScheme = iter([
            ('registration_name', name),
            ('company_identifier', identifier),
            ('tax_level_code', code),
            ('exemption_reason_code', code),
            ('exemption_reason', text),
            ('registration_address', asbie),
            ('tax_scheme', asbie),
        ])
        self.Payment = iter([
            ('id', identifier),
            ('paid_amount', amount),
            ('received_date', datetime),
            ('paid_date', datetime),
            ('paid_time', datetime),
            ('instruction_identifier', identifier),
        ])
        self.PaymentMandate = iter([
            ('id', identifier),
            ('mandate_type_code', code),
            ('maximum_payment_instructions', numeric),
            ('maximum_paid_amount', amount),
            ('signature_identifier', identifier),
            ('payer_party', asbie),
            ('payer_financial_account', asbie),
            ('validity_period', asbie),
            ('payment_reversal_period', asbie),
            ('clause', asbie),
        ])
        self.PaymentMeans = iter([
            ('id', identifier),
            ('payment_means_code', code),
            ('payment_due_date', datetime),
            ('payment_channel_code', code),
            ('instruction_identifier', identifier),
            ('instruction_note', text),
            ('payment_identifier', identifier),
            ('card_account', asbie),
            ('payer_financial_account', asbie),
            ('payee_financial_account', asbie),
            ('credit_account', asbie),
            ('payment_mandate', asbie),
            ('trade_financing', asbie),
        ])
        self.PaymentTerms = iter([
            ('id', identifier),
            ('payment_means_identifier', identifier),
            ('prepaid_payment_reference_identifier', identifier),
            ('note', text),
            ('reference_event_code', code),
            ('settlement_discount_percent', numeric),
            ('penalty_surcharge_percent', numeric),
            ('payment_percent', numeric),
            ('amount', amount),
            ('settlement_discount_amount', amount),
            ('penalty_amount', amount),
            ('payment_terms_details_uri', identifier),
            ('payment_due_date', datetime),
            ('installment_due_date', datetime),
            ('invoicing_party_reference', text),
            ('settlement_period', asbie),
            ('penalty_period', asbie),
            ('exchange_rate', asbie),
            ('validity_period', asbie),
        ])
        self.PerformanceDataLine = iter([
            ('id', identifier),
            ('note', text),
            ('performance_value', quantity),
            ('performance_metric_type_code', code),
            ('period', asbie),
            ('item', asbie),
        ])
        self.Period = iter([
            ('start_date', datetime),
            ('start_time', datetime),
            ('end_date', datetime),
            ('end_time', datetime),
            ('duration', measure),
            ('description_code', code),
            ('description', text),
        ])
        self.Person = iter([
            ('id', identifier),
            ('first_name', name),
            ('family_name', name),
            ('title', text),
            ('middle_name', name),
            ('other_name', name),
            ('name_suffix', text),
            ('job_title', text),
            ('nationality', identifier),
            ('gender_code', code),
            ('birth_date', datetime),
            ('birthplace_name', text),
            ('organization_department', text),
            ('contact', asbie),
            ('financial_account', asbie),
            ('identity_document_reference', asbie),
            ('residence_address', asbie),
        ])
        self.PhysicalAttribute = iter([
            ('attribute_identifier', identifier),
            ('position_code', code),
            ('description_code', code),
            ('description', text),
        ])
        self.Pickup = iter([
            ('id', identifier),
            ('actual_pickup_date', datetime),
            ('actual_pickup_time', datetime),
            ('earliest_pickup_date', datetime),
            ('earliest_pickup_time', datetime),
            ('latest_pickup_date', datetime),
            ('latest_pickup_time', datetime),
            ('pickup_location', asbie),
            ('pickup_party', asbie),
        ])
        self.PowerOfAttorney = iter([
            ('id', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('description', text),
            ('notary_party', asbie),
            ('agent_party', asbie),
            ('witness_party', asbie),
            ('mandate_document_reference', asbie),
        ])
        self.Price = iter([
            ('price_amount', amount),
            ('base_quantity', quantity),
            ('price_change_reason', text),
            ('price_type_code', code),
            ('price_type', text),
            ('orderable_unit_factor', numeric),
            ('validity_period', asbie),
            ('price_list', asbie),
            ('allowance_charge', asbie),
            ('pricing_exchange_rate', asbie),
        ])
        self.PriceExtension = iter([
            ('amount', amount),
            ('tax_total', asbie),
        ])
        self.PriceList = iter([
            ('id', identifier),
            ('status_code', code),
            ('validity_period', asbie),
            ('previous_price_list', asbie),
        ])
        self.PricingReference = iter([
            ('original_item_location_quantity', asbie),
            ('alternative_condition_price', asbie),
        ])
        self.ProcessJustification = iter([
            ('previous_cancellation_reason_code', code),
            ('process_reason_code', code),
            ('process_reason', text),
            ('description', text),
        ])
        self.ProcurementProject = iter([
            ('id', identifier),
            ('name', name),
            ('description', text),
            ('procurement_type_code', code),
            ('procurement_sub_type_code', code),
            ('quality_control_code', code),
            ('required_fee', amount),
            ('fee_description', text),
            ('requested_delivery_date', datetime),
            ('estimated_overall_contract', quantity),
            ('note', text),
            ('requested_tender_total', asbie),
            ('main_commodity_classification', asbie),
            ('additional_commodity_classification', asbie),
            ('realized_location', asbie),
            ('planned_period', asbie),
            ('contract_extension', asbie),
            ('request_for_tender_line', asbie),
        ])
        self.ProcurementProjectLot = iter([
            ('id', identifier),
            ('tendering_terms', asbie),
            ('procurement_project', asbie),
        ])
        self.ProjectReference = iter([
            ('id', identifier),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('work_phase_reference', asbie),
        ])
        self.PromotionalEvent = iter([
            ('promotional_event_type_code', code),
            ('submission', datetime),
            ('first_shipment_availibility_date', datetime),
            ('latest_proposal_acceptance_date', datetime),
            ('promotional_specification', asbie),
        ])
        self.PromotionalEventLineItem = iter([
            ('amount', amount),
            ('event_line_item', asbie),
        ])
        self.PromotionalSpecification = iter([
            ('specification_identifier', identifier),
            ('promotional_event_line_item', asbie),
            ('event_tactic', asbie),
        ])
        self.QualificationResolution = iter([
            ('admission_code', code),
            ('exclusion_reason', text),
            ('resolution', text),
            ('resolution_date', datetime),
            ('resolution_time', datetime),
            ('procurement_project_lot', asbie),
        ])
        self.QualifyingParty = iter([
            ('participation', numeric),
            ('personal_situation', text),
            ('operating_years', quantity),
            ('employee', quantity),
            ('business_classification_evidence', identifier),
            ('business_identity_evidence', identifier),
            ('tenderer_role_code', code),
            ('business_classification_scheme', asbie),
            ('technical_capability', asbie),
            ('financial_capability', asbie),
            ('completed_task', asbie),
            ('declaration', asbie),
            ('party', asbie),
            ('economic_operator_role', asbie),
        ])
        self.QuotationLine = iter([
            ('id', identifier),
            ('note', text),
            ('quantity', quantity),
            ('line_extension_amount', amount),
            ('total_tax_amount', amount),
            ('request_for_quotation_line_identifier', identifier),
            ('document_reference', asbie),
            ('line_item', asbie),
            ('seller_proposed_substitute_line_item', asbie),
            ('alternative_line_item', asbie),
            ('request_line_reference', asbie),
        ])
        self.RailTransport = iter([
            ('train_identifier', identifier),
            ('rail_car_identifier', identifier),
        ])
        self.ReceiptLine = iter([
            ('id', identifier),
            ('uuid', identifier),
            ('note', text),
            ('received_quantity', quantity),
            ('short_quantity', quantity),
            ('shortage_action_code', code),
            ('rejected_quantity', quantity),
            ('reject_reason_code', code),
            ('reject_reason', text),
            ('reject_action_code', code),
            ('quantity_discrepancy_code', code),
            ('oversupply_quantity', quantity),
            ('received_date', datetime),
            ('timing_complaint_code', code),
            ('timing_complaint', text),
            ('order_line_reference', asbie),
            ('despatch_line_reference', asbie),
            ('document_reference', asbie),
            ('item', asbie),
            ('shipment', asbie),
        ])
        self.Regulation = iter([
            ('name', name),
            ('legal_reference', text),
            ('ontology_uri', identifier),
        ])
        self.RelatedItem = iter([
            ('id', identifier),
            ('quantity', quantity),
            ('description', text),
        ])
        self.ReminderLine = iter([
            ('id', identifier),
            ('note', text),
            ('uuid', identifier),
            ('balance_brought_forward_indicator', indicator),
            ('debit_line_amount', amount),
            ('credit_line_amount', amount),
            ('accounting_cost_code', code),
            ('accounting_cost', text),
            ('penalty_surcharge_percent', numeric),
            ('amount', amount),
            ('payment_purpose_code', code),
            ('reminder_period', asbie),
            ('billing_reference', asbie),
            ('exchange_rate', asbie),
        ])
        self.RemittanceAdviceLine = iter([
            ('id', identifier),
            ('note', text),
            ('uuid', identifier),
            ('debit_line_amount', amount),
            ('credit_line_amount', amount),
            ('balance_amount', amount),
            ('payment_purpose_code', code),
            ('invoicing_party_reference', text),
            ('accounting_supplier_party', asbie),
            ('accounting_customer_party', asbie),
            ('buyer_customer_party', asbie),
            ('seller_supplier_party', asbie),
            ('originator_customer_party', asbie),
            ('payee_party', asbie),
            ('invoice_period', asbie),
            ('billing_reference', asbie),
            ('document_reference', asbie),
            ('exchange_rate', asbie),
        ])
        self.Renewal = iter([
            ('amount', amount),
            ('period', asbie),
        ])
        self.RequestForQuotationLine = iter([
            ('id', identifier),
            ('uuid', identifier),
            ('note', text),
            ('optional_line_item_indicator', indicator),
            ('privacy_code', code),
            ('security_classification_code', code),
            ('document_reference', asbie),
            ('line_item', asbie),
        ])
        self.RequestForTenderLine = iter([
            ('id', identifier),
            ('uuid', identifier),
            ('note', text),
            ('quantity', quantity),
            ('minimum_quantity', quantity),
            ('maximum_quantity', quantity),
            ('tax_included_indicator', indicator),
            ('minimum_amount', amount),
            ('maximum_amount', amount),
            ('estimated_amount', amount),
            ('document_reference', asbie),
            ('delivery_period', asbie),
            ('required_item_location_quantity', asbie),
            ('warranty_validity_period', asbie),
            ('item', asbie),
            ('sub_request_for_tender_line', asbie),
        ])
        self.RequestedTenderTotal = iter([
            ('estimated_overall_contract', amount),
            ('total_amount', amount),
            ('tax_included_indicator', indicator),
            ('minimum_amount', amount),
            ('maximum_amount', amount),
            ('monetary_scope', text),
            ('average_subsequent_contract', amount),
            ('applicable_tax_category', asbie),
        ])
        self.Response = iter([
            ('reference', identifier),
            ('response_code', code),
            ('description', text),
            ('effective_date', datetime),
            ('effective_time', datetime),
            ('status', asbie),
        ])
        self.ResultOfVerification = iter([
            ('validator', identifier),
            ('validation_result_code', code),
            ('validation_date', datetime),
            ('validation_time', datetime),
            ('validate_process', text),
            ('validate_tool', text),
            ('validate_tool_version', text),
            ('signatory_party', asbie),
        ])
        self.RetailPlannedImpact = iter([
            ('amount', amount),
            ('forecast_purpose_code', code),
            ('forecast_type_code', code),
            ('period', asbie),
        ])
        self.RoadTransport = iter([
            ('license_plate_identifier', identifier)
        ])
        self.SalesItem = iter([
            ('quantity', quantity),
            ('activity_property', asbie),
            ('tax_exclusive_price', asbie),
            ('tax_inclusive_price', asbie),
            ('item', asbie),
        ])
        self.SecondaryHazard = iter([
            ('id', identifier),
            ('placard_notation', text),
            ('placard_endorsement', text),
            ('emergency_procedures_code', code),
            ('extension', text),
        ])
        self.ServiceFrequency = iter([('week_day', code)])
        self.ServiceProviderParty = iter([
            ('id', identifier),
            ('service_type_code', code),
            ('service_type', text),
            ('party', asbie),
            ('seller_contact', asbie),
        ])
        self.ShareholderParty = iter([
            ('partecipation', numeric),
            ('party', asbie),
        ])
        self.Shipment = iter([
            ('id', identifier),
            ('shipping_priority_level_code', code),
            ('handling_code', code),
            ('handling_instructions', text),
            ('information', text),
            ('gross_weight', measure),
            ('net_weight', measure),
            ('net_net_weight', measure),
            ('gross_volume', measure),
            ('net_volume', measure),
            ('total_goods_item_quantity', quantity),
            ('total_transport_handling_unit_quantity', quantity),
            ('insurance_value', amount),
            ('declared_customs_value', amount),
            ('declared_for_carriage_value', amount),
            ('declared_statistics_value', amount),
            ('free_on_board_value', amount),
            ('special_instructions', text),
            ('delivery_instructions', text),
            ('split_consignment_indicator', indicator),
            ('consignment_quantity', quantity),
            ('consignment', asbie),
            ('goods_item', asbie),
            ('shipment_stage', asbie),
            ('delivery', asbie),
            ('transport_handling_unit', asbie),
            ('return_address', asbie),
            ('origin_address', asbie),
            ('first_arrival_port_location', asbie),
            ('last_exit_port_location', asbie),
            ('export_country', asbie),
            ('freight_allowance_charge', asbie),
        ])
        self.ShipmentStage = iter([
            ('id', identifier),
            ('transport_mode_code', code),
            ('transport_means_type_code', code),
            ('transit_direction_code', code),
            ('pre_carriage_indicator', indicator),
            ('on_carriage_indicator', indicator),
            ('estimated_delivery_date', datetime),
            ('estimated_delivery_time', datetime),
            ('required_delivery_date', datetime),
            ('required_delivery_time', datetime),
            ('loading_sequence_identifier', identifier),
            ('successive_sequence_identifier', identifier),
            ('instructions', text),
            ('demurrage_instructions', text),
            ('crew_quantity', quantity),
            ('passenger_quantity', quantity),
            ('transit_period', asbie),
            ('carrier_party', asbie),
            ('transport_means', asbie),
            ('loading_port_location', asbie),
            ('unloading_port_location', asbie),
            ('transship_port_location', asbie),
            ('loading_transport_event', asbie),
            ('examination_transport_event', asbie),
            ('availability_transport_event', asbie),
            ('exportation_transport_event', asbie),
            ('discharge_transport_event', asbie),
            ('warehousing_transport_event', asbie),
            ('takeover_transport_event', asbie),
            ('optional_takeover_transport_event', asbie),
            ('dropoff_transport_event', asbie),
            ('actual_pickup_transport_event', asbie),
            ('delivery_transport_event', asbie),
            ('receipt_transport_event', asbie),
            ('storage_transport_event', asbie),
            ('acceptance_transport_event', asbie),
            ('terminal_operator_party', asbie),
            ('customs_agent_party', asbie),
            ('estimated_transit_period', asbie),
            ('freight_allowance_charge', asbie),
            ('freight_charge_location', asbie),
            ('detention_transport_event', asbie),
            ('requested_departure_transport_event', asbie),
            ('requested_arrival_transport_event', asbie),
            ('requested_waypoint_transport_event', asbie),
            ('planned_departure_transport_event', asbie),
            ('planned_arrival_transport_event', asbie),
            ('planned_waypoint_transport_event', asbie),
            ('actual_departure_transport_event', asbie),
            ('actual_waypoint_transport_event', asbie),
            ('actual_arrival_transport_event', asbie),
            ('transport_event', asbie),
            ('estimated_departure_transport_event', asbie),
            ('estimated_arrival_transport_event', asbie),
            ('passenger_person', asbie),
            ('driver_person', asbie),
            ('reporting_person', asbie),
            ('crew_member_person', asbie),
            ('security_officer_person', asbie),
            ('master_person', asbie),
            ('ships_surgeon_person', asbie),
        ])
        self.Signature = iter([
            ('id', identifier),
            ('note', text),
            ('validation_date', datetime),
            ('validation_time', datetime),
            ('validator', identifier),
            ('canonicalization_method', text),
            ('signature_method', text),
            ('signatory_party', asbie),
            ('digital_signature_attachment', asbie),
            ('original_document_reference', asbie),
        ])
        self.StatementLine = iter([
            ('id', identifier),
            ('note', text),
            ('uuid', identifier),
            ('balance_brought_forward_indicator', indicator),
            ('debit_line_amount', amount),
            ('credit_line_amount', amount),
            ('balance_amount', amount),
            ('payment_purpose_code', code),
            ('payment_means', asbie),
            ('payment_terms', asbie),
            ('buyer_customer_party', asbie),
            ('seller_supplier_party', asbie),
            ('originator_customer_party', asbie),
            ('accounting_customer_party', asbie),
            ('accounting_supplier_party', asbie),
            ('payee_party', asbie),
            ('invoice_period', asbie),
            ('billing_reference', asbie),
            ('document_reference', asbie),
            ('exchange_rate', asbie),
            ('allowance_charge', asbie),
            ('collected_payment', asbie),
        ])
        self.Status = iter([
            ('condition_code', code),
            ('reference_date', datetime),
            ('reference_time', datetime),
            ('description', text),
            ('status_reason_code', code),
            ('status_reason', text),
            ('sequence_identifier', identifier),
            ('text', text),
            ('indication_indicator', indicator),
            ('percent', numeric),
            ('reliability_percent', numeric),
            ('condition', asbie),
        ])
        self.StockAvailabilityReportLine = iter([
            ('id', identifier),
            ('note', text),
            ('quantity', quantity),
            ('value', amount),
            ('availability_date', datetime),
            ('availability_status_code', code),
            ('item', asbie),
        ])
        self.Stowage = iter([
            ('location_identifier', identifier),
            ('location', text),
            ('measurement_dimension', asbie),
        ])
        self.SubcontractTerms = iter([
            ('rate', numeric),
            ('unknown_price', indicator),
            ('description', text),
            ('amount', amount),
            ('subcontracting_conditions_code', code),
            ('maximum_percent', numeric),
            ('minimum_percent', numeric),
        ])
        self.SubscriberConsumption = iter([
            ('consumption_identifier', identifier),
            ('specification_type_code', code),
            ('note', text),
            ('total_metered_quantity', quantity),
            ('subscriber_party', asbie),
            ('utility_consumption_point', asbie),
            ('on_account_payment', asbie),
            ('consumption', asbie),
            ('supplier_consumption', asbie),
        ])
        self.SupplierConsumption = iter([
            ('description', text),
            ('utility_supplier_party', asbie),
            ('utility_customer_party', asbie),
            ('consumption', asbie),
            ('contract', asbie),
            ('consumption_line', asbie),
        ])
        self.SupplierParty = iter([
            ('customer_assigned_account_identifier', identifier),
            ('additional_account_identifier', identifier),
            ('data_sending_capability', text),
            ('party', asbie),
            ('despatch_contact', asbie),
            ('accounting_contact', asbie),
            ('seller_contact', asbie),
        ])
        self.TaxCategory = iter([
            ('id', identifier),
            ('name', name),
            ('percent', numeric),
            ('base_unit_measure', measure),
            ('per_unit_amount', amount),
            ('tax_exemption_reason_code', code),
            ('tax_exemption_reason', text),
            ('tier_range', text),
            ('tier_rate', numeric),
            ('tax_scheme', asbie),
        ])
        self.TaxScheme = iter([
            ('id', identifier),
            ('name', name),
            ('tax_type_code', code),
            ('currency_code', code),
            ('jurisdiction_region_address', asbie),
        ])
        self.TaxSubtotal = iter([
            ('taxable_amount', amount),
            ('tax_amount', amount),
            ('calculation_sequence', numeric),
            ('transaction_currency_tax_amount', amount),
            ('percent', numeric),
            ('base_unit_measure', measure),
            ('per_unit_amount', amount),
            ('tier_range', text),
            ('tier_rate', numeric),
            ('tax_category', asbie),
        ])
        self.TaxTotal = iter([
            ('tax_amount', amount),
            ('rounding_amount', amount),
            ('tax_evidence_indicator', indicator),
            ('tax_included_indicator', indicator),
            ('tax_subtotal', asbie),
        ])
        self.TelecommunicationsService = iter([
            ('id', identifier),
            ('call_date', datetime),
            ('call_time', datetime),
            ('service_number_called', text),
            ('telecommunications_service_category', text),
            ('telecommunications_service_category_code', code),
            ('movie_title', text),
            ('roaming_partner_name', name),
            ('pay_per_view', text),
            ('quantity', quantity),
            ('telecommunications_service_call', text),
            ('telecommunications_service_call_code', code),
            ('call_base_amount', amount),
            ('call_extension_amount', amount),
            ('price', asbie),
            ('country', asbie),
            ('exchange_rate', asbie),
            ('allowance_charge', asbie),
            ('tax_total', asbie),
            ('call_duty', asbie),
            ('time_duty', asbie),
        ])
        self.TelecommunicationsSupply = iter([
            ('telecommunications_supply_type', text),
            ('telecommunications_supply_type_code', code),
            ('privacy_code', code),
            ('description', text),
            ('total_amount', amount),
            ('telecommunications_supply_line', asbie),
        ])
        self.TelecommunicationsSupplyLine = iter([
            ('id', identifier),
            ('phone_number', text),
            ('description', text),
            ('line_extension_amount', amount),
            ('exchange_rate', asbie),
            ('allowance_charge', asbie),
            ('tax_total', asbie),
            ('telecommunications_service', asbie),
        ])
        self.Temperature = iter([
            ('attribute_identifier', identifier),
            ('measure', measure),
            ('description', text),
        ])
        self.TenderLine = iter([
            ('id', identifier),
            ('note', text),
            ('quantity', quantity),
            ('line_extension_amount', amount),
            ('total_tax_amount', amount),
            ('orderable_unit', text),
            ('content_unit', quantity),
            ('order_quantity_increment', numeric),
            ('minimum_order_quantity', quantity),
            ('maximum_order_quantity', quantity),
            ('warranty_information', text),
            ('pack_level_code', code),
            ('document_reference', asbie),
            ('item', asbie),
            ('offered_item_location_quantity', asbie),
            ('replacement_related_item', asbie),
            ('warranty_party', asbie),
            ('warranty_validity_period', asbie),
            ('sub_tender_line', asbie),
            ('call_for_tenders_line_reference', asbie),
            ('call_for_tenders_document_reference', asbie),
        ])
        self.TenderPreparation = iter([
            ('tender_envelope_identifier', identifier),
            ('tender_envelope_type_code', code),
            ('description', text),
            ('open_tender_identifier', identifier),
            ('procurement_project_lot', asbie),
            ('document_tender_requirement', asbie),
        ])
        self.TenderRequirement = iter([
            ('name', name),
            ('description', text),
            ('template_document_reference', asbie),
        ])
        self.TenderResult = iter([
            ('tender_result_code', code),
            ('description', text),
            ('advertisement', amount),
            ('award_date', datetime),
            ('award_time', datetime),
            ('received_tender', quantity),
            ('lower_tender', amount),
            ('higher_tender', amount),
            ('start_date', datetime),
            ('received_electronic_tender_quantity', quantity),
            ('received_foreign_tender_quantity', quantity),
            ('contract', asbie),
            ('awarded_tendered_project', asbie),
            ('contract_formalization_period', asbie),
            ('subcontract_terms', asbie),
            ('winning_party', asbie),
        ])
        self.TenderedProject = iter([
            ('variant', identifier),
            ('fee', amount),
            ('fee_description', text),
            ('tender_envelope_identifier', identifier),
            ('tender_envelope_type_code', code),
            ('procurement_project_lot', asbie),
            ('evidence_document_reference', asbie),
            ('tax_total', asbie),
            ('legal_monetary_total', asbie),
            ('tender_line', asbie),
            ('awarding_criterion_response', asbie),
        ])
        self.TendererPartyQualification = iter([
            ('interested_procurement_project_lot', asbie),
            ('main_qualifying_party', asbie),
            ('additional_qualifying_party', asbie),
        ])
        self.TendererQualificationRequest = iter([
            ('company_legal_form_code', code),
            ('company_legal_form', text),
            ('personal_situation', text),
            ('operating_years', quantity),
            ('employee', quantity),
            ('description', text),
            ('required_business_classification_scheme', asbie),
            ('technical_evaluation_criterion', asbie),
            ('financial_evaluation_criterion', asbie),
            ('specific_tenderer_requirement', asbie),
            ('economic_operator_role', asbie),
        ])
        self.TendererRequirement = iter([
            ('name', name),
            ('tenderer_requirement_type_code', code),
            ('description', text),
            ('legal_reference', text),
            ('suggested_evidence', asbie),
        ])
        self.TenderingProcess = iter([
            ('id', identifier),
            ('original_contracting_system', identifier),
            ('description', text),
            ('negotiation_description', text),
            ('procedure_code', code),
            ('urgency_code', code),
            ('expense_code', code),
            ('part_presentation_code', code),
            ('contracting_system_code', code),
            ('submission_method_code', code),
            ('candidate_reduction_constraint', indicator),
            ('government_agreement_constraint', indicator),
            ('document_availability_period', asbie),
            ('tender_submission_deadline_period', asbie),
            ('invitation_submission_period', asbie),
            ('participation_request_reception_period', asbie),
            ('notice_document_reference', asbie),
            ('additional_document_reference', asbie),
            ('process_justification', asbie),
            ('economic_operator_short_list', asbie),
            ('open_tender_event', asbie),
            ('auction_terms', asbie),
            ('framework_agreement', asbie),
        ])
        self.TenderingTerms = iter([
            ('awarding_method_type_code', code),
            ('price_evaluation_code', code),
            ('maximum_variant_quantity', quantity),
            ('variant_constraint', indicator),
            ('accepted_variants_description', text),
            ('price_revision_formula_description', text),
            ('funding_program_code', code),
            ('funding_program', text),
            ('maximum_advertisement', amount),
            ('note', text),
            ('payment_frequency_code', code),
            ('economic_operator_registry_uri', identifier),
            ('required_curricula', indicator),
            ('other_conditions', indicator),
            ('additional_conditions', text),
            ('latest_security_clearance_date', datetime),
            ('documentation_fee_amount', amount),
            ('penalty_clause', asbie),
            ('required_financial_guarantee', asbie),
            ('procurement_legislation_document_reference', asbie),
            ('fiscal_legislation_document_reference', asbie),
            ('environmental_legislation_document_reference', asbie),
            ('employment_legislation_document_reference', asbie),
            ('contractual_document_reference', asbie),
            ('call_for_tenders_document_reference', asbie),
            ('warranty_validity_period', asbie),
            ('payment_terms', asbie),
            ('tenderer_qualification_request', asbie),
            ('allowed_subcontract_terms', asbie),
            ('tender_preparation', asbie),
            ('contract_execution_requirement', asbie),
            ('awarding_terms', asbie),
            ('additional_information_party', asbie),
            ('document_provider_party', asbie),
            ('tender_recipient_party', asbie),
            ('contract_responsible_party', asbie),
            ('tender_evaluation_party', asbie),
            ('tender_validity_period', asbie),
            ('contract_acceptance_period', asbie),
            ('appeal_terms', asbie),
            ('language', asbie),
            ('budget_account_line', asbie),
            ('replaced_notice_document_reference', asbie),
        ])
        self.TradeFinancing = iter([
            ('id', identifier),
            ('financing_instrument_code', code),
            ('contract_document_reference', asbie),
            ('document_reference', asbie),
            ('financing_party', asbie),
            ('financing_financial_account', asbie),
            ('clause', asbie),
        ])
        self.TradingTerms = iter([
            ('information', text),
            ('reference', text),
            ('applicable_address', asbie),
        ])
        self.TransactionConditions = iter([
            ('id', identifier),
            ('action_code', code),
            ('description', text),
            ('document_reference', asbie),
        ])
        self.TransportEquipment = iter([
            ('id', identifier),
            ('referenced_consignment_identifier', identifier),
            ('transport_equipment_type_code', code),
            ('provider_type_code', code),
            ('owner_type_code', code),
            ('size_type_code', code),
            ('disposition_code', code),
            ('fullness_indication_code', code),
            ('refrigeration_on_indicator', indicator),
            ('information', text),
            ('returnability_indicator', indicator),
            ('legal_status_indicator', indicator),
            ('air_flow_percent', numeric),
            ('humidity_percent', numeric),
            ('animal_food_approved_indicator', indicator),
            ('human_food_approved_indicator', indicator),
            ('dangerous_goods_approved_indicator', indicator),
            ('refrigerated_indicator', indicator),
            ('characteristics', text),
            ('damage_remarks', text),
            ('description', text),
            ('special_transport_requirements', text),
            ('gross_weight', measure),
            ('gross_volume', measure),
            ('tare_weight', measure),
            ('tracking_device_code', code),
            ('power', indicator),
            ('trace_id', identifier),
            ('measurement_dimension', asbie),
            ('transport_equipment_seal', asbie),
            ('minimum_temperature', asbie),
            ('maximum_temperature', asbie),
            ('provider_party', asbie),
            ('loading_proof_party', asbie),
            ('supplier_party', asbie),
            ('owner_party', asbie),
            ('operating_party', asbie),
            ('loading_location', asbie),
            ('unloading_location', asbie),
            ('storage_location', asbie),
            ('positioning_transport_event', asbie),
            ('quarantine_transport_event', asbie),
            ('delivery_transport_event', asbie),
            ('pickup_transport_event', asbie),
            ('handling_transport_event', asbie),
            ('loading_transport_event', asbie),
            ('transport_event', asbie),
            ('applicable_transport_means', asbie),
            ('haulage_trading_terms', asbie),
            ('hazardous_goods_transit', asbie),
            ('packaged_transport_handling_unit', asbie),
            ('service_allowance_charge', asbie),
            ('freight_allowance_charge', asbie),
            ('attached_transport_equipment', asbie),
            ('delivery', asbie),
            ('pickup', asbie),
            ('despatch', asbie),
            ('shipment_document_reference', asbie),
            ('contained_in_transport_equipment', asbie),
            ('package', asbie),
            ('goods_item', asbie),
        ])
        self.TransportEquipmentSeal = iter([
            ('id', identifier),
            ('seal_issuer_type_code', code),
            ('condition', text),
            ('seal_status_code', code),
            ('sealing_party_type', text),
        ])
        self.TransportEvent = iter([
            ('identification', identifier),
            ('occurrence_date', datetime),
            ('occurrence_time', datetime),
            ('transport_event_type_code', code),
            ('description', text),
            ('completion_indicator', indicator),
            ('reported_shipment', asbie),
            ('current_status', asbie),
            ('contact', asbie),
            ('location', asbie),
            ('signature', asbie),
            ('period', asbie),
        ])
        self.TransportExecutionTerms = iter([
            ('transport_user_special_terms', text),
            ('transport_service_provider_special_terms', text),
            ('change_conditions', text),
            ('payment_terms', asbie),
            ('delivery_terms', asbie),
            ('bonus_payment_terms', asbie),
            ('commission_payment_terms', asbie),
            ('penalty_payment_terms', asbie),
            ('environmental_emission', asbie),
            ('notification_requirement', asbie),
            ('service_charge_payment_terms', asbie),
        ])
        self.TransportHandlingUnit = iter([
            ('id', identifier),
            ('transport_handling_unit_type_code', code),
            ('handling_code', code),
            ('handling_instructions', text),
            ('hazardous_risk_indicator', indicator),
            ('total_goods_item_quantity', quantity),
            ('total_package_quantity', quantity),
            ('damage_remarks', text),
            ('shipping_marks', text),
            ('trace_id', identifier),
            ('handling_unit_despatch_line', asbie),
            ('actual_package', asbie),
            ('received_handling_unit_receipt_line', asbie),
            ('transport_equipment', asbie),
            ('transport_means', asbie),
            ('hazardous_goods_transit', asbie),
            ('measurement_dimension', asbie),
            ('minimum_temperature', asbie),
            ('maximum_temperature', asbie),
            ('goods_item', asbie),
            ('floor_space_measurement_dimension', asbie),
            ('pallet_space_measurement_dimension', asbie),
            ('shipment_document_reference', asbie),
            ('status', asbie),
            ('customs_declaration', asbie),
            ('referenced_shipment', asbie),
            ('package', asbie),
        ])
        self.TransportMeans = iter([
            ('journey_identifier', identifier),
            ('registration_nationality_identifier', identifier),
            ('registration_nationality', text),
            ('direction_code', code),
            ('transport_means_type_code', code),
            ('trade_service_code', code),
            ('stowage', asbie),
            ('air_transport', asbie),
            ('road_transport', asbie),
            ('rail_transport', asbie),
            ('maritime_transport', asbie),
            ('owner_party', asbie),
            ('measurement_dimension', asbie),
        ])
        self.TransportSchedule = iter([
            ('sequence', numeric),
            ('reference_date', datetime),
            ('reference_time', datetime),
            ('reliability_percent', numeric),
            ('remarks', text),
            ('status_location', asbie),
            ('actual_arrival_transport_event', asbie),
            ('actual_departure_transport_event', asbie),
            ('estimated_departure_transport_event', asbie),
            ('estimated_arrival_transport_event', asbie),
            ('planned_departure_transport_event', asbie),
            ('planned_arrival_transport_event', asbie),
        ])
        self.TransportationSegment = iter([
            ('sequence', numeric),
            ('transport_execution_plan_reference', identifier),
            ('transportation_service', asbie),
            ('transport_service_provider_party', asbie),
            ('referenced_consignment', asbie),
            ('shipment_stage', asbie),
        ])
        self.TransportationService = iter([
            ('transport_service_code', code),
            ('tariff_class_code', code),
            ('priority', text),
            ('freight_rate_class_code', code),
            ('transportation_service_description', text),
            ('transportation_service_details_uri', identifier),
            ('nomination_date', datetime),
            ('nomination_time', datetime),
            ('name', name),
            ('sequence', numeric),
            ('transport_equipment', asbie),
            ('supported_transport_equipment', asbie),
            ('unsupported_transport_equipment', asbie),
            ('commodity_classification', asbie),
            ('supported_commodity_classification', asbie),
            ('unsupported_commodity_classification', asbie),
            ('total_capacity_dimension', asbie),
            ('shipment_stage', asbie),
            ('transport_event', asbie),
            ('responsible_transport_service_provider_party', asbie),
            ('environmental_emission', asbie),
            ('estimated_duration_period', asbie),
            ('scheduled_service_frequency', asbie),
        ])
        self.UnstructuredPrice = iter([
            ('price_amount', amount),
            ('time_amount', text),
        ])
        self.UtilityItem = iter([
            ('id', identifier),
            ('subscriber_identifier', identifier),
            ('subscriber_type', text),
            ('subscriber_type_code', code),
            ('description', text),
            ('pack_quantity', quantity),
            ('pack_size', numeric),
            ('consumption_type', text),
            ('consumption_type_code', code),
            ('current_charge_type', text),
            ('current_charge_type_code', code),
            ('one_time_charge_type', text),
            ('one_time_charge_type_code', code),
            ('tax_category', asbie),
            ('contract', asbie),
        ])
        self.WebSiteAccess = iter([
            ('uri', identifier),
            ('password', text),
            ('login', text),
        ])
        self.WinningParty = iter([('rank', text), ('party', asbie)])
        self.WorkPhaseReference = iter([
            ('id', identifier),
            ('work_phase_code', code),
            ('work_phase', text),
            ('progress_percent', numeric),
            ('start_date', datetime),
            ('end_date', datetime),
            ('work_order_document_reference', asbie),
        ])

    def __iter__(self):
        # yield each definition following a counter or iterate __slots__
        # equivalent to iterating through the keys
        for definition in self.__slots__:
            yield definition

    def __getitem__(self, item):
        key = str(item)
        if key in self.__slots__:
            return getattr(self, key)
        else:
            raise IndexError('Component not defined in library')

    def __setitem__(self, key, value):
        raise RuntimeError('Component definitions cannot be modified')

    def __setattr__(self, key, value):
        raise RuntimeError('Component definitions cannot be modified')

    def field_definition(self, component, field):
        data = None
        if component in self.__slots__:
            object_ = getattr(self, component)
            check = itertools.filterfalse(lambda x, y: x != field, object_)
            if check:
                _, data = check.pop()
        return type(data)


class DocumentMap:

    __slots__ = (
        'ApplicationResponse',
        'AttachedDocument',
        'UnawardedNotification',
        'BillOfLading',
        'CallForTenders',
        'Catalogue',
        'CatalogueDeletion',
        'CatalogueItemSpecificationUpdate',
        'CataloguePricingUpdate',
        'CatalogueRequest',
        'CertificateOfOrigin',
        'ContractAwardNotice',
        'ContractNotice',
        'CreditNote',
        'DebitNote',
        'DespatchAdvice',
        'DocumentStatus',
        'DocumentStatusRequest',
        'ExceptionCriteria',
        'ExceptionNotification',
        'Forecast',
        'ForecastRevision',
        'ForwardingInstructions',
        'FreightInvoice',
        'FulfilmentCancellation',
        'GoodsItemItinerary',
        'GuaranteeCertificate',
        'InstructionForReturns',
        'InventoryReport',
        'Invoice',
        'ItemInformationRequest',
        'Order',
        'OrderCancellation',
        'OrderChange',
        'OrderResponse',
        'OrderResponseSimple',
        'PackingList',
        'PriorInformationNotice',
        'ProductActivity',
        'Quotation',
        'ReceiptAdvice',
        'Reminder',
        'RemittanceAdvice',
        'RequestForQuotation',
        'RetailEvent',
        'SelfBilledCreditNote',
        'SelfBilledInvoice',
        'Statement',
        'StockAvailabilityReport',
        'Tender',
        'TendererQualification',
        'TendererQualificationResponse',
        'TenderReceipt',
        'TradeItemLocationProfile',
        'TransportationStatus',
        'TransportationStatusRequest',
        'TransportExecutionPlan',
        'TransportExecutionPlanRequest',
        'TransportProgressStatus',
        'TransportProgressStatusRequest',
        'TransportServiceDescription',
        'TransportServiceDescriptionRequest',
        'UtilityStatement',
        'Waybill',
    )

    def __init__(self):
        code = CodeType.mock()
        asbie = AssociatedBusinessEntity.mock()
        measure = MeasureType.mock()
        quantity = QuantityType.mock()
        datetime = DateTimeType.mock()
        numeric = NumericType.mock()
        text = TextType.mock()
        identifier = IdentifierType.mock()
        indicator = IndicatorType.mock()
        amount = AmountType.mock()
        binary = BinaryObjectType.mock()
        name = NameType.mock()

        # define the various definition of the registered documents
        self.ApplicationResponse = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('response_date', datetime),
            ('response_time', datetime),
            ('note', text),
            ('version_id', identifier),
            ('signature', asbie),
            ('sender_party', asbie),
            ('receiver_party', asbie),
            ('document_response', asbie),
        ])
        self.AttachedDocument = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('document_type_code', code),
            ('document_type', text),
            ('parent_document_id', identifier),
            ('parent_document_type_code', code),
            ('parent_document_version_id', identifier),
            ('signature', asbie),
            ('sender_party', asbie),
            ('receiver_party', asbie),
            ('attachment', asbie),
            ('parent_document_line_reference', asbie),
        ])
        self.BillOfLading = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('carrier_assigned_id', identifier),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('name', name),
            ('description', text),
            ('note', text),
            ('document_status_code', code),
            ('shipping_order_id', identifier),
            ('to_order_indicator', indicator),
            ('ad_valorem_indicator', indicator),
            ('declared_carriage_value_amount', numeric),
            ('other_instruction', text),
            ('consignor_party', asbie),
            ('carrier_party', asbie),
            ('freight_forwarder_party', asbie),
            ('shipment', asbie),
            ('document_reference', asbie),
            ('exchange_rate', asbie),
            ('document_distribution', asbie),
            ('signature', asbie),
        ])
        self.CallForTenders = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('contract_folder_id', identifier),
            ('approval_date', datetime),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('version_id', identifier),
            ('previous_version_id', identifier),
            ('legal_document_reference', asbie),
            ('technical_document_reference', asbie),
            ('additional_document_reference', asbie),
            ('signature', asbie),
            ('contracting_party', asbie),
            ('originator_customer_party', asbie),
            ('receiver_party', asbie),
            ('tendering_terms', asbie),
            ('tendering_process', asbie),
            ('procurement_project', asbie),
            ('procurement_project_lot', asbie),
        ])
        self.Catalogue = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('uuid', identifier),
            ('action_code', code),
            ('name', name),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('revision_date', datetime),
            ('revision_time', datetime),
            ('note', text),
            ('description', text),
            ('version_id', identifier),
            ('previous_version_id', identifier),
            ('line_count_numeric', quantity),
            ('validity_period', asbie),
            ('referenced_contract', asbie),
            ('source_catalogue_reference', asbie),
            ('document_reference', asbie),
            ('signature', asbie),
            ('provider_party', asbie),
            ('receiver_party', asbie),
            ('seller_supplier_party', asbie),
            ('contractor_customer_party', asbie),
            ('trading_terms', asbie),
            ('catalogue_line', asbie),
        ])
        self.CatalogueDeletion = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('uuid', identifier),
            ('name', name),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('effective_date', datetime),
            ('effective_time', datetime),
            ('note', text),
            ('version_id', identifier),
            ('description', text),
            ('validity_period', asbie),
            ('deleted_catalogue_reference', asbie),
            ('referenced_contract', asbie),
            ('signature', asbie),
            ('receiver_party', asbie),
            ('provider_party', asbie),
            ('seller_supplier_party', asbie),
            ('contractor_customer_party', asbie),
        ])
        self.CatalogueItemSpecificationUpdate = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('uuid', identifier),
            ('name', name),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('revision_date', datetime),
            ('revision_time', datetime),
            ('note', text),
            ('description', text),
            ('version_id', identifier),
            ('line_count_numeric', quantity),
            ('validity_period', asbie),
            ('related_catalogue_reference', asbie),
            ('referenced_contract', asbie),
            ('signature', asbie),
            ('provider_party', asbie),
            ('receiver_party', asbie),
            ('seller_supplier_party', asbie),
            ('contractor_customer_party', asbie),
            ('trading_terms', asbie),
            ('default_language', asbie),
            ('catalogue_item_specification_update_line', asbie),
        ])
        self.CataloguePricingUpdate = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('uuid', identifier),
            ('name', name),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('revision_date', datetime),
            ('revision_time', datetime),
            ('note', text),
            ('description', text),
            ('version_id', identifier),
            ('line_count_numeric', quantity),
            ('validity_period', asbie),
            ('related_catalogue_reference', asbie),
            ('referenced_contract', asbie),
            ('signature', asbie),
            ('provider_party', asbie),
            ('receiver_party', asbie),
            ('seller_supplier_party', asbie),
            ('contractor_customer_party', asbie),
            ('trading_terms', asbie),
            ('default_language', asbie),
            ('catalogue_pricing_update_line', asbie),
        ])
        self.CatalogueRequest = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('uuid', identifier),
            ('name', name),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('description', text),
            ('pricing_update_request_indicator', indicator),
            ('item_update_request_indicator', indicator),
            ('line_count_numeric', quantity),
            ('validity_period', asbie),
            ('signature', asbie),
            ('receiver_party', asbie),
            ('provider_party', asbie),
            ('seller_supplier_party', asbie),
            ('contractor_customer_party', asbie),
            ('requested_catalogue_reference', asbie),
            ('referenced_contract', asbie),
            ('trading_terms', asbie),
            ('document_reference', asbie),
            ('applicable_territory_address', asbie),
            ('requested_language', asbie),
            ('requested_classification_scheme', asbie),
            ('catalogue_request_line', asbie),
        ])
        self.CertificateOfOrigin = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('description', text),
            ('note', text),
            ('version_id', identifier),
            ('signature', asbie),
            ('exporter_party', asbie),
            ('importer_party', asbie),
            ('endorser_party', asbie),
            ('certificate_of_origin_application', asbie),
            ('issuer_endorsement', asbie),
            ('embassy_endorsement', asbie),
            ('insurance_endorsement', asbie),
        ])
        self.ContractAwardNotice = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('contract_folder_id', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('regulatory_domain', text),
            ('publish_award_indicator', indicator),
            ('previous_document_reference', asbie),
            ('minutes_document_reference', asbie),
            ('signature', asbie),
            ('contracting_party', asbie),
            ('originator_customer_party', asbie),
            ('receiver_party', asbie),
            ('tendering_terms', asbie),
            ('tendering_process', asbie),
            ('procurement_project', asbie),
            ('procurement_project_lot', asbie),
            ('tender_result', asbie),
        ])
        self.ContractNotice = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('contract_folder_id', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('requested_publication_date', datetime),
            ('regulatory_domain', domain),
            ('frequency_period', asbie),
            ('signature', asbie),
            ('contracting_party', asbie),
            ('originator_customer_party', asbie),
            ('receiver_party', asbie),
            ('tendering_terms', asbie),
            ('tendering_process', asbie),
            ('procurement_project', asbie),
            ('procurement_project_lot', asbie),
        ])
        self.CreditNote = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('tax_point_date', datetime),
            ('credit_note_type_code', code),
            ('note', text),
            ('document_currency_code', code),
            ('tax_currency_code', code),
            ('pricing_currency_code', code),
            ('payment_currency_code', code),
            ('payment_alternative_currency_code', code),
            ('accounting_cost_code', code),
            ('accounting_cost', numeric),
            ('line_count_numeric', numeric),
            ('buyer_reference', text),
            ('invoice_period', asbie),
            ('discrepancy_response', asbie),
            ('order_reference', asbie),
            ('billing_reference', asbie),
            ('despatch_document_reference', asbie),
            ('receipt_document_reference', asbie),
            ('contract_document_reference', asbie),
            ('additional_document_reference', asbie),
            ('statement_document_reference', asbie),
            ('originator_document_reference', asbie),
            ('signature', asbie),
            ('accounting_supplier_party', asbie),
            ('accounting_customer_party', asbie),
            ('payee_party', asbie),
            ('buyer_customer_party', asbie),
            ('seller_supplier_party', asbie),
            ('tax_representative_party', asbie),
            ('delivery', asbie),
            ('delivery_terms', asbie),
            ('payment_means', asbie),
            ('payment_terms', asbie),
            ('tax_exchange_rate', asbie),
            ('pricing_exchange_rate', asbie),
            ('payment_exchange_rate', asbie),
            ('payment_alternative_exchange_rate', asbie),
            ('allowance_charge', asbie),
            ('tax_total', asbie),
            ('legal_monetary_total', asbie),
            ('credit_note_line', asbie),
        ])
        self.DebitNote = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('tax_point_date', datetime),
            ('document_currency_code', code),
            ('tax_currency_code', code),
            ('pricing_currency_code', code),
            ('payment_currency_code', code),
            ('payment_alternative_currency_code', code),
            ('accounting_cost_code', code),
            ('accounting_cost', numeric),
            ('line_count_numeric', numeric),
            ('invoice_period', asbie),
            ('discrepancy_response', asbie),
            ('order_reference', asbie),
            ('billing_reference', asbie),
            ('despatch_document_reference', asbie),
            ('receipt_document_reference', asbie),
            ('statement_document_reference', asbie),
            ('contract_document_reference', asbie),
            ('additional_document_reference', asbie),
            ('signature', asbie),
            ('accounting_supplier_party', asbie),
            ('accounting_customer_party', asbie),
            ('payee_party', asbie),
            ('buyer_customer_party', asbie),
            ('seller_supplier_party', asbie),
            ('tax_representative_party', asbie),
            ('prepaid_payment', asbie),
            ('allowance_charge', asbie),
            ('delivery', asbie),
            ('delivery_terms', asbie),
            ('payment_means', asbie),
            ('payment_terms', asbie),
            ('tax_exchange_rate', asbie),
            ('pricing_exchange_rate', asbie),
            ('payment_exchange_rate', asbie),
            ('payment_alternative_exchange_rate', asbie),
            ('tax_total', asbie),
            ('requested_monetary_total', asbie),
            ('debit_note_line', asbie),
        ])
        self.DespatchAdvice = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('document_status_code', code),
            ('despatch_advice_type_code', code),
            ('note', text),
            ('line_count_numeric', numeric),
            ('order_reference', asbie),
            ('additional_document_reference', asbie),
            ('signature', asbie),
            ('despatch_supplier_party', asbie),
            ('delivery_customer_party', asbie),
            ('buyer_customer_party', asbie),
            ('seller_supplier_party', asbie),
            ('originator_customer_party', asbie),
            ('shipment', asbie),
            ('despatch_line', asbie),
        ])
        self.DocumentStatus = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('u_u_id', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('signature', asbie),
            ('sender_party', asbie),
            ('receiver_party', asbie),
            ('document_response', asbie),
            ('additional_document_response', asbie),
        ])
        self.DocumentStatusRequest = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('u_u_id', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('tracking_id', identifier),
            ('requested_document_reference', asbie),
            ('signature', asbie),
            ('sender_party', asbie),
            ('receiver_party', asbie),
        ])
        self.ExceptionCriteria = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('u_u_id', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('version_id', identifier),
            ('validity_period', asbie),
            ('document_reference', asbie),
            ('signature', asbie),
            ('sender_party', asbie),
            ('receiver_party', asbie),
            ('buyer_customer_party', asbie),
            ('seller_supplier_party', asbie),
            ('exception_criteria_line', asbie),
        ])
        self.ExceptionNotification = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('exception_observation_period', asbie),
            ('document_reference', asbie),
            ('signature', asbie),
            ('sender_party', asbie),
            ('receiver_party', asbie),
            ('buyer_customer_party', asbie),
            ('seller_supplier_party', asbie),
            ('exception_notification_line', asbie),
        ])
        self.Forecast = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('version_id', identifier),
            ('based_on_consensus_indicator', indicator),
            ('forecast_purpose_code', code),
            ('forecast_period', asbie),
            ('additional_document_reference', asbie),
            ('signature', asbie),
            ('sender_party', asbie),
            ('receiver_party', asbie),
            ('buyer_customer_party', asbie),
            ('seller_supplier_party', asbie),
            ('forecast_line', asbie),
        ])
        self.ForecastRevision = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('u_u_id', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('sequence_number_id', identifier),
            ('revision_status_code', code),
            ('purpose_code', code),
            ('forecast_period', asbie),
            ('original_document_reference', asbie),
            ('signature', asbie),
            ('sender_party', asbie),
            ('receiver_party', asbie),
            ('buyer_customer_party', asbie),
            ('seller_supplier_party', asbie),
            ('forecast_revision_line', asbie),
        ])
        self.ForwardingInstructions = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('carrier_assigned_id', identifier),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('name', name),
            ('description', text),
            ('note', text),
            ('document_status_code', code),
            ('shipping_order_id', identifier),
            ('to_order_indicator', indicator),
            ('ad_valorem_indicator', indicator),
            ('declared_carriage_value_amount', amount),
            ('other_instruction', text),
            ('consignor_party', asbie),
            ('carrier_party', asbie),
            ('freight_forwarder_party', asbie),
            ('shipment', asbie),
            ('document_reference', asbie),
            ('exchange_rate', asbie),
            ('signature', asbie),
        ])
        self.FreightInvoice = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('invoice_type_code', code),
            ('note', text),
            ('tax_point_date', datetime),
            ('document_currency_code', code),
            ('tax_currency_code', code),
            ('pricing_currency_code', code),
            ('payment_currency_code', code),
            ('payment_alternative_currency_code', code),
            ('accounting_cost_code', code),
            ('accounting_cost', text),
            ('line_count_numeric', numeric),
            ('invoice_period', asbie),
            ('shipment', asbie),
            ('order_reference', asbie),
            ('billing_reference', asbie),
            ('despatch_document_reference', asbie),
            ('receipt_document_reference', asbie),
            ('originator_document_reference', asbie),
            ('contract_document_reference', asbie),
            ('additional_document_reference', asbie),
            ('signature', asbie),
            ('accounting_supplier_party', asbie),
            ('accounting_customer_party', asbie),
            ('payee_party', asbie),
            ('tax_representative_party', asbie),
            ('payment_means', asbie),
            ('payment_terms', asbie),
            ('prepaid_payment', asbie),
            ('allowance_charge', asbie),
            ('tax_exchange_rate', asbie),
            ('pricing_exchange_rate', asbie),
            ('payment_exchange_rate', asbie),
            ('payment_alternative_exchange_rate', asbie),
            ('tax_total', asbie),
            ('legal_monetary_total', asbie),
            ('invoice_line', asbie),
        ])
        self.FulfilmentCancellation = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('cancellation_note', text),
            ('despatch_document_reference', asbie),
            ('receipt_document_reference', asbie),
            ('order_reference', asbie),
            ('additional_document_reference', asbie),
            ('contract', asbie),
            ('signature', asbie),
            ('buyer_customer_party', asbie),
            ('seller_supplier_party', asbie),
            ('delivery_customer_party', asbie),
            ('despatch_supplier_party', asbie),
            ('originator_customer_party', asbie),
        ])
        self.GoodsItemItinerary = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('version_id', identifier),
            ('transport_execution_plan_reference_id', identifier),
            ('signature', asbie),
            ('sender_party', asbie),
            ('receiver_party', asbie),
            ('referenced_consignment', asbie),
            ('referenced_transport_equipment', asbie),
            ('referenced_package', asbie),
            ('referenced_goods_item', asbie),
            ('transportation_segment', asbie),
        ])
        self.GuaranteeCertificate = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('contract_folder_id', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('guarantee_type_code', code),
            ('purpose', text),
            ('liability_amount', amount),
            ('constitution_code', code),
            ('note', text),
            ('applicable_period', asbie),
            ('applicable_regulation', asbie),
            ('guarantee_document_reference', asbie),
            ('immobilized_security', asbie),
            ('signature', asbie),
            ('guarantor_party', asbie),
            ('interested_party', asbie),
            ('beneficiary_party', asbie),
        ])
        self.InstructionForReturns = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('u_u_id', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('document_reference', asbie),
            ('signature', asbie),
            ('seller_supplier_party', asbie),
            ('retailer_customer_party', asbie),
            ('manufacturer_party', asbie),
            ('shipment', asbie),
            ('instruction_for_returns_line', asbie),
        ])
        self.InventoryReport = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('document_currency_code', code),
            ('inventory_period', asbie),
            ('document_reference', asbie),
            ('signature', asbie),
            ('retailer_customer_party', asbie),
            ('inventory_reporting_party', asbie),
            ('seller_supplier_party', asbie),
            ('inventory_report_line', asbie),
        ])
        self.Invoice = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('due_date', datetime),
            ('invoice_type_code', code),
            ('note', text),
            ('tax_point_date', datetime),
            ('document_currency_code', code),
            ('tax_currency_code', code),
            ('pricing_currency_code', code),
            ('payment_currency_code', code),
            ('payment_alternative_currency_code', code),
            ('accounting_cost_code', code),
            ('accounting_cost', text),
            ('line_count_numeric', numeric),
            ('buyer_reference', text),
            ('invoice_period', asbie),
            ('order_reference', asbie),
            ('billing_reference', asbie),
            ('despatch_document_reference', asbie),
            ('receipt_document_reference', asbie),
            ('statement_document_reference', asbie),
            ('originator_document_reference', asbie),
            ('contract_document_reference', asbie),
            ('additional_document_reference', asbie),
            ('project_reference', asbie),
            ('signature', asbie),
            ('accounting_supplier_party', asbie),
            ('accounting_customer_party', asbie),
            ('payee_party', asbie),
            ('buyer_customer_party', asbie),
            ('seller_supplier_party', asbie),
            ('tax_representative_party', asbie),
            ('delivery', asbie),
            ('delivery_terms', asbie),
            ('payment_means', asbie),
            ('payment_terms', asbie),
            ('prepaid_payment', asbie),
            ('allowance_charge', asbie),
            ('tax_exchange_rate', asbie),
            ('pricing_exchange_rate', asbie),
            ('payment_exchange_rate', asbie),
            ('payment_alternative_exchange_rate', asbie),
            ('tax_total', asbie),
            ('withholding_tax_total', asbie),
            ('legal_monetary_total', asbie),
            ('invoice_line', asbie),
        ])
        self.ItemInformationRequest = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('period', asbie),
            ('document_reference', asbie),
            ('signature', asbie),
            ('sender_party', asbie),
            ('receiver_party', asbie),
            ('buyer_customer_party', asbie),
            ('seller_supplier_party', asbie),
            ('item_information_request_line', asbie),
        ])
        self.Order = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('sales_order_id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('order_type_code', code),
            ('note', text),
            ('requested_invoice_currency_code', code),
            ('document_currency_code', code),
            ('pricing_currency_code', code),
            ('tax_currency_code', code),
            ('customer_reference', text),
            ('accounting_cost_code', code),
            ('accounting_cost', text),
            ('line_count_numeric', numeric),
            ('validity_period', asbie),
            ('quotation_document_reference', asbie),
            ('order_document_reference', asbie),
            ('originator_document_reference', asbie),
            ('catalogue_reference', asbie),
            ('additional_document_reference', asbie),
            ('contract', asbie),
            ('project_reference', asbie),
            ('signature', asbie),
            ('buyer_customer_party', asbie),
            ('seller_supplier_party', asbie),
            ('originator_customer_party', asbie),
            ('freight_forwarder_party', asbie),
            ('accounting_customer_party', asbie),
            ('delivery', asbie),
            ('delivery_terms', asbie),
            ('payment_means', asbie),
            ('payment_terms', asbie),
            ('transaction_conditions', asbie),
            ('allowance_charge', asbie),
            ('tax_exchange_rate', asbie),
            ('pricing_exchange_rate', asbie),
            ('payment_exchange_rate', asbie),
            ('destination_country', asbie),
            ('tax_total', asbie),
            ('anticipated_monetary_total', asbie),
            ('order_line', asbie),
        ])
        self.OrderCancellation = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('cancellation_note', text),
            ('order_reference', asbie),
            ('originator_document_reference', asbie),
            ('additional_document_reference', asbie),
            ('contract', asbie),
            ('signature', asbie),
            ('buyer_customer_party', asbie),
            ('seller_supplier_party', asbie),
            ('originator_customer_party', asbie),
        ])
        self.OrderChange = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('sales_order_id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('sequence_number_id', identifier),
            ('note', text),
            ('requested_invoice_currency_code', code),
            ('document_currency_code', code),
            ('pricing_currency_code', code),
            ('tax_currency_code', code),
            ('customer_reference', text),
            ('accounting_cost_code', code),
            ('accounting_cost', text),
            ('line_count_numeric', numeric),
            ('validity_period', asbie),
            ('order_reference', asbie),
            ('quotation_document_reference', asbie),
            ('originator_document_reference', asbie),
            ('additional_document_reference', asbie),
            ('contract', asbie),
            ('signature', asbie),
            ('buyer_customer_party', asbie),
            ('seller_supplier_party', asbie),
            ('originator_customer_party', asbie),
            ('freight_forwarder_party', asbie),
            ('accounting_customer_party', asbie),
            ('accounting_supplier_party', asbie),
            ('delivery', asbie),
            ('delivery_terms', asbie),
            ('payment_means', asbie),
            ('payment_terms', asbie),
            ('transaction_conditions', asbie),
            ('allowance_charge', asbie),
            ('tax_exchange_rate', asbie),
            ('pricing_exchange_rate', asbie),
            ('payment_exchange_rate', asbie),
            ('destination_country', asbie),
            ('tax_total', asbie),
            ('anticipated_monetary_total', asbie),
            ('order_line', asbie),
        ])
        self.OrderResponse = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('sales_order_id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('order_response_code', code),
            ('note', text),
            ('document_currency_code', code),
            ('pricing_currency_code', code),
            ('tax_currency_code', code),
            ('total_packages_quantity', quantity),
            ('gross_weight_measure', measure),
            ('net_weight_measure', measure),
            ('net_net_weight_measure', measure),
            ('gross_volume_measure', measure),
            ('net_volume_measure', measure),
            ('customer_reference', text),
            ('accounting_cost_code', code),
            ('accounting_cost', text),
            ('line_count_numeric', numeric),
            ('validity_period', asbie),
            ('order_reference', asbie),
            ('order_document_reference', asbie),
            ('originator_document_reference', asbie),
            ('additional_document_reference', asbie),
            ('contract', asbie),
            ('signature', asbie),
            ('seller_supplier_party', asbie),
            ('buyer_customer_party', asbie),
            ('originator_customer_party', asbie),
            ('freight_forwarder_party', asbie),
            ('accounting_supplier_party', asbie),
            ('accounting_customer_party', asbie),
            ('delivery', asbie),
            ('delivery_terms', asbie),
            ('payment_means', asbie),
            ('payment_terms', asbie),
            ('allowance_charge', asbie),
            ('transaction_conditions', asbie),
            ('tax_exchange_rate', asbie),
            ('pricing_exchange_rate', asbie),
            ('payment_exchange_rate', asbie),
            ('destination_country', asbie),
            ('tax_total', asbie),
            ('legal_monetary_total', asbie),
            ('order_line', asbie),
        ])
        self.OrderResponseSimple = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('accepted_indicator', indicator),
            ('rejection_note', text),
            ('customer_reference', text),
            ('accounting_cost_code', code),
            ('accounting_cost', text),
            ('order_reference', asbie),
            ('additional_document_reference', asbie),
            ('signature', asbie),
            ('seller_supplier_party', asbie),
            ('buyer_customer_party', asbie),
            ('originator_customer_party', asbie),
            ('accounting_supplier_party', asbie),
            ('accounting_customer_party', asbie),
        ])
        self.PackingList = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('name', name),
            ('description', text),
            ('note', text),
            ('version_id', identifier),
            ('other_instruction', text),
            ('consignor_party', asbie),
            ('carrier_party', asbie),
            ('freight_forwarder_party', asbie),
            ('shipment', asbie),
            ('document_reference', asbie),
            ('document_distribution', asbie),
            ('signature', asbie),
        ])
        self.PriorInformationNotice = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('contract_folder_id', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('planned_date', datetime),
            ('document_reference', asbie),
            ('signature', asbie),
            ('contracting_party', asbie),
            ('originator_customer_party', asbie),
            ('receiver_party', asbie),
            ('tendering_terms', asbie),
            ('tendering_process', asbie),
            ('procurement_project', asbie),
            ('procurement_project_lot', asbie),
        ])
        self.ProductActivity = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('document_currency_code', code),
            ('activity_period', asbie),
            ('document_reference', asbie),
            ('signature', asbie),
            ('sender_party', asbie),
            ('receiver_party', asbie),
            ('supply_chain_activity_data_line', asbie),
        ])
        self.Quotation = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('u_u_id', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('pricing_currency_code', code),
            ('line_count_numeric', numeric),
            ('validity_period', asbie),
            ('request_for_quotation_document_reference', asbie),
            ('additional_document_reference', asbie),
            ('contract', asbie),
            ('signature', asbie),
            ('seller_supplier_party', asbie),
            ('buyer_customer_party', asbie),
            ('originator_customer_party', asbie),
            ('delivery', asbie),
            ('delivery_terms', asbie),
            ('payment_means', asbie),
            ('transaction_conditions', asbie),
            ('allowance_charge', asbie),
            ('destination_country', asbie),
            ('tax_total', asbie),
            ('quoted_monetary_total', asbie),
            ('quotation_line', asbie),
        ])
        self.ReceiptAdvice = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('u_u_id', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('document_status_code', code),
            ('receipt_advice_type_code', code),
            ('note', text),
            ('line_count_numeric', numeric),
            ('order_reference', asbie),
            ('despatch_document_reference', asbie),
            ('additional_document_reference', asbie),
            ('signature', asbie),
            ('delivery_customer_party', asbie),
            ('despatch_supplier_party', asbie),
            ('buyer_customer_party', asbie),
            ('seller_supplier_party', asbie),
            ('shipment', asbie),
            ('receipt_line', asbie),
        ])
        self.Reminder = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('reminder_type_code', code),
            ('reminder_sequence_numeric', numeric),
            ('note', text),
            ('tax_point_date', datetime),
            ('document_currency_code', code),
            ('tax_currency_code', code),
            ('pricing_currency_code', code),
            ('payment_currency_code', code),
            ('payment_alternative_currency_code', code),
            ('accounting_cost_code', code),
            ('accounting_cost', text),
            ('line_count_numeric', numeric),
            ('reminder_period', asbie),
            ('additional_document_reference', asbie),
            ('signature', asbie),
            ('accounting_supplier_party', asbie),
            ('accounting_customer_party', asbie),
            ('payee_party', asbie),
            ('tax_representative_party', asbie),
            ('payment_means', asbie),
            ('payment_terms', asbie),
            ('prepaid_payment', asbie),
            ('allowance_charge', asbie),
            ('tax_exchange_rate', asbie),
            ('pricing_exchange_rate', asbie),
            ('payment_exchange_rate', asbie),
            ('payment_alternative_exchange_rate', asbie),
            ('tax_total', asbie),
            ('legal_monetary_total', asbie),
            ('reminder_line', asbie),
        ])
        self.RemittanceAdvice = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('document_currency_code', code),
            ('total_debit_amount', amount),
            ('total_credit_amount', amount),
            ('total_payment_amount', amount),
            ('payment_order_reference', text),
            ('payer_reference', text),
            ('invoicing_party_reference', text),
            ('line_count_numeric', numeric),
            ('invoice_period', asbie),
            ('billing_reference', asbie),
            ('additional_document_reference', asbie),
            ('signature', asbie),
            ('accounting_customer_party', asbie),
            ('accounting_supplier_party', asbie),
            ('payee_party', asbie),
            ('payment_means', asbie),
            ('tax_total', asbie),
            ('remittance_advice_line', asbie),
        ])
        self.RequestForQuotation = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('submission_due_date', datetime),
            ('note', text),
            ('pricing_currency_code', code),
            ('line_count_numeric', numeric),
            ('requested_validity_period', asbie),
            ('catalogue_document_reference', asbie),
            ('additional_document_reference', asbie),
            ('signature', asbie),
            ('originator_customer_party', asbie),
            ('seller_supplier_party', asbie),
            ('buyer_customer_party', asbie),
            ('delivery', asbie),
            ('delivery_terms', asbie),
            ('destination_country', asbie),
            ('contract', asbie),
            ('request_for_quotation_line', asbie),
        ])
        self.RetailEvent = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('retail_event_name', name),
            ('retail_event_status_code', code),
            ('seller_event_id', identifier),
            ('buyer_event_id', identifier),
            ('description', text),
            ('period', asbie),
            ('original_document_reference', asbie),
            ('signature', asbie),
            ('sender_party', asbie),
            ('receiver_party', asbie),
            ('buyer_customer_party', asbie),
            ('seller_supplier_party', asbie),
            ('event_comment', asbie),
            ('promotional_event', asbie),
            ('miscellaneous_event', asbie),
        ])
        self.SelfBilledCreditNote = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('tax_point_date', datetime),
            ('note', text),
            ('document_currency_code', code),
            ('tax_currency_code', code),
            ('pricing_currency_code', code),
            ('payment_currency_code', code),
            ('payment_alternative_currency_code', code),
            ('accounting_cost_code', code),
            ('accounting_cost', text),
            ('line_count_numeric', numeric),
            ('invoice_period', asbie),
            ('discrepancy_response', asbie),
            ('order_reference', asbie),
            ('billing_reference', asbie),
            ('despatch_document_reference', asbie),
            ('receipt_document_reference', asbie),
            ('contract_document_reference', asbie),
            ('statement_document_reference', asbie),
            ('originator_document_reference', asbie),
            ('additional_document_reference', asbie),
            ('signature', asbie),
            ('accounting_customer_party', asbie),
            ('accounting_supplier_party', asbie),
            ('payee_party', asbie),
            ('buyer_customer_party', asbie),
            ('seller_supplier_party', asbie),
            ('tax_representative_party', asbie),
            ('delivery', asbie),
            ('delivery_terms', asbie),
            ('payment_means', asbie),
            ('payment_terms', asbie),
            ('allowance_charge', asbie),
            ('tax_exchange_rate', asbie),
            ('pricing_exchange_rate', asbie),
            ('payment_exchange_rate', asbie),
            ('payment_alternative_exchange_rate', asbie),
            ('tax_total', asbie),
            ('legal_monetary_total', asbie),
            ('credit_note_line', asbie),
        ])
        self.SelfBilledInvoice = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('tax_point_date', datetime),
            ('invoice_type_code', code),
            ('note', text),
            ('document_currency_code', code),
            ('tax_currency_code', code),
            ('pricing_currency_code', code),
            ('payment_currency_code', code),
            ('payment_alternative_currency_code', code),
            ('accounting_cost_code', code),
            ('accounting_cost', text),
            ('line_count_numeric', numeric),
            ('invoice_period', asbie),
            ('order_reference', asbie),
            ('billing_reference', asbie),
            ('contract_document_reference', asbie),
            ('despatch_document_reference', asbie),
            ('receipt_document_reference', asbie),
            ('statement_document_reference', asbie),
            ('originator_document_reference', asbie),
            ('additional_document_reference', asbie),
            ('signature', asbie),
            ('accounting_customer_party', asbie),
            ('accounting_supplier_party', asbie),
            ('buyer_customer_party', asbie),
            ('seller_supplier_party', asbie),
            ('payee_party', asbie),
            ('tax_representative_party', asbie),
            ('delivery', asbie),
            ('delivery_terms', asbie),
            ('payment_means', asbie),
            ('payment_terms', asbie),
            ('prepaid_payment', asbie),
            ('allowance_charge', asbie),
            ('tax_exchange_rate', asbie),
            ('pricing_exchange_rate', asbie),
            ('payment_exchange_rate', asbie),
            ('payment_alternative_exchange_rate', asbie),
            ('tax_total', asbie),
            ('legal_monetary_total', asbie),
            ('invoice_line', asbie),
        ])
        self.Statement = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('document_currency_code', code),
            ('total_debit_amount', amount),
            ('total_credit_amount', amount),
            ('total_balance_amount', amount),
            ('line_count_numeric', numeric),
            ('statement_type_code', code),
            ('statement_period', asbie),
            ('additional_document_reference', asbie),
            ('signature', asbie),
            ('accounting_supplier_party', asbie),
            ('accounting_customer_party', asbie),
            ('buyer_customer_party', asbie),
            ('seller_supplier_party', asbie),
            ('originator_customer_party', asbie),
            ('payee_party', asbie),
            ('payment_means', asbie),
            ('payment_terms', asbie),
            ('allowance_charge', asbie),
            ('tax_total', asbie),
            ('statement_line', asbie),
        ])
        self.StockAvailabilityReport = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('document_currency_code', code),
            ('inventory_period', asbie),
            ('document_reference', asbie),
            ('signature', asbie),
            ('seller_supplier_party', asbie),
            ('retailer_customer_party', asbie),
            ('inventory_reporting_party', asbie),
            ('stock_availability_report_line', asbie),
        ])
        self.Tender = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('tender_type_code', code),
            ('contract_folder_id', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('contract_name', name),
            ('note', text),
            ('validity_period', asbie),
            ('document_reference', asbie),
            ('signature', asbie),
            ('tenderer_party', asbie),
            ('tenderer_qualification_document_reference', asbie),
            ('subcontractor_party', asbie),
            ('contracting_party', asbie),
            ('originator_customer_party', asbie),
            ('tendered_project', asbie),
        ])
        self.TendererQualification = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('contract_folder_id', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('version_id', identifier),
            ('previous_version_id', identifier),
            ('signature', asbie),
            ('tenderer_party_qualification', asbie),
            ('contracting_party', asbie),
            ('evidence', asbie),
            ('additional_document_reference', asbie),
        ])
        self.TendererQualificationResponse = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('contract_folder_id', identifier),
            ('contract_name', name),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('sender_party', asbie),
            ('receiver_party', asbie),
            ('resolution_document_reference', asbie),
            ('qualification_resolution', asbie),
            ('appeal_terms', asbie),
            ('signature', asbie),
        ])
        self.TenderReceipt = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('contract_folder_id', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('contract_name', name),
            ('note', text),
            ('registered_date', datetime),
            ('registered_time', datetime),
            ('tender_document_reference', asbie),
            ('signature', asbie),
            ('sender_party', asbie),
            ('receiver_party', asbie),
        ])
        self.TradeItemLocationProfile = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('profile_status_code', code),
            ('period', asbie),
            ('document_reference', asbie),
            ('signature', asbie),
            ('sender_party', asbie),
            ('receiver_party', asbie),
            ('buyer_customer_party', asbie),
            ('seller_supplier_party', asbie),
            ('item_management_profile', asbie),
        ])
        self.TransportationStatus = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('carrier_assigned_id', identifier),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('name', name),
            ('description', text),
            ('note', text),
            ('shipping_order_id', identifier),
            ('other_instruction', text),
            ('transportation_status_type_code', code),
            ('transport_execution_status_code', code),
            ('consignment', asbie),
            ('transport_event', asbie),
            ('document_reference', asbie),
            ('signature', asbie),
            ('sender_party', asbie),
            ('receiver_party', asbie),
            ('transportation_status_request_document_reference', asbie),
            ('transport_execution_plan_document_reference', asbie),
            ('updated_pickup_transport_event', asbie),
            ('updated_delivery_transport_event', asbie),
            ('status_location', asbie),
            ('status_period', asbie),
        ])
        self.TransportationStatusRequest = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('carrier_assigned_id', identifier),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('name', name),
            ('description', text),
            ('note', text),
            ('shipping_order_id', identifier),
            ('other_instruction', text),
            ('transportation_status_type_code', code),
            ('sender_party', asbie),
            ('receiver_party', asbie),
            ('transport_execution_plan_document_reference', asbie),
            ('consignment', asbie),
            ('document_reference', asbie),
            ('signature', asbie),
            ('requested_status_location', asbie),
            ('requested_status_period', asbie),
        ])
        self.TransportExecutionPlan = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('version_id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('document_status_code', code),
            ('document_status_reason_code', code),
            ('document_status_reason_description', text),
            ('note', text),
            ('transport_user_remarks', text),
            ('transport_service_provider_remarks', text),
            ('sender_party', asbie),
            ('receiver_party', asbie),
            ('transport_user_party', asbie),
            ('transport_service_provider_party', asbie),
            ('bill_to_party', asbie),
            ('signature', asbie),
            ('transport_execution_plan_request_document_reference', asbie),
            ('transport_execution_plan_document_reference', asbie),
            ('transport_service_description_document_reference', asbie),
            ('additional_document_reference', asbie),
            ('transport_contract', asbie),
            ('transport_service_provider_response_required_period', asbie),
            ('transport_user_response_required_period', asbie),
            ('validity_period', asbie),
            ('main_transportation_service', asbie),
            ('additional_transportation_service', asbie),
            ('service_start_time_period', asbie),
            ('service_end_time_period', asbie),
            ('from_location', asbie),
            ('to_location', asbie),
            ('at_location', asbie),
            ('transport_execution_terms', asbie),
            ('consignment', asbie),
        ])
        self.TransportExecutionPlanRequest = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('version_id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('document_status_code', code),
            ('document_status_reason_code', code),
            ('document_status_reason_description', text),
            ('note', text),
            ('transport_user_remarks', text),
            ('sender_party', asbie),
            ('receiver_party', asbie),
            ('transport_user_party', asbie),
            ('transport_service_provider_party', asbie),
            ('payee_party', asbie),
            ('signature', asbie),
            ('transport_execution_plan_document_reference', asbie),
            ('transport_service_description_document_reference', asbie),
            ('additional_document_reference', asbie),
            ('transport_contract', asbie),
            ('transport_service_provider_response_deadline_period', asbie),
            ('main_transportation_service', asbie),
            ('additional_transportation_service', asbie),
            ('service_start_time_period', asbie),
            ('service_end_time_period', asbie),
            ('from_location', asbie),
            ('to_location', asbie),
            ('at_location', asbie),
            ('transport_execution_terms', asbie),
            ('consignment', asbie),
        ])
        self.TransportProgressStatus = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('status_available_indicator', indicator),
            ('signature', asbie),
            ('sender_party', asbie),
            ('receiver_party', asbie),
            ('source_issuer_party', asbie),
            ('transport_progress_status_request_document_reference', asbie),
            ('transport_means', asbie),
            ('transport_schedule', asbie),
        ])
        self.TransportProgressStatusRequest = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('signature', asbie),
            ('sender_party', asbie),
            ('receiver_party', asbie),
            ('transport_means', asbie),
            ('status_location', asbie),
        ])
        self.TransportServiceDescription = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('service_name', name),
            ('response_code', code),
            ('signature', asbie),
            ('sender_party', asbie),
            ('receiver_party', asbie),
            ('transport_service_description_request_document_reference', asbie),
            ('transport_service_provider_party', asbie),
            ('service_charge_payment_terms', asbie),
            ('validity_period', asbie),
            ('transportation_service', asbie),
        ])
        self.TransportServiceDescriptionRequest = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('note', text),
            ('service_information_preference_code', code),
            ('signature', asbie),
            ('sender_party', asbie),
            ('receiver_party', asbie),
            ('transport_service_provider_party', asbie),
            ('transportation_service', asbie),
        ])
        self.UnawardedNotification = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('contract_folder_id', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('contract_name', name),
            ('note', text),
            ('signature', asbie),
            ('sender_party', asbie),
            ('receiver_party', asbie),
            ('minutes_document_reference', asbie),
            ('additional_document_reference', asbie),
            ('tender_result', asbie),
            ('appeal_terms', asbie),
        ])
        self.UtilityStatement = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('copy_indicator', indicator),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('utility_statement_type_code', code),
            ('note', text),
            ('document_currency_code', code),
            ('accounting_cost_code', code),
            ('accounting_cost', text),
            ('parent_document_reference', asbie),
            ('additional_document_reference', asbie),
            ('signature', asbie),
            ('sender_party', asbie),
            ('receiver_party', asbie),
            ('customer_party', asbie),
            ('subscriber_party', asbie),
            ('main_on_account_payment', asbie),
            ('subscriber_consumption', asbie),
        ])
        self.Waybill = iter([
            ('ubl_version_id', identifier),
            ('customization_id', identifier),
            ('profile_id', identifier),
            ('profile_execution_id', identifier),
            ('id', identifier),
            ('carrier_assigned_id', identifier),
            ('uuid', identifier),
            ('issue_date', datetime),
            ('issue_time', datetime),
            ('name', name),
            ('description', text),
            ('note', text),
            ('shipping_order_id', identifier),
            ('ad_valorem_indicator', indicator),
            ('declared_carriage_value_amount', amount),
            ('other_instruction', text),
            ('consignor_party', asbie),
            ('carrier_party', asbie),
            ('freight_forwarder_party', asbie),
            ('shipment', asbie),
            ('document_reference', asbie),
            ('exchange_rate', asbie),
            ('document_distribution', asbie),
            ('signature', asbie),
        ])

